{"accuracy": 0.76, "correct_count": 304, "total_count": 400}
{"id": 11, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base': 8. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_10", "question": [[{"role": "user", "content": "Calculate the area of a right-angled triangle given the lengths of its base and height as 6cm and 10cm."}]], "function": [{"name": "calculate_area", "description": "Calculate the area of a right-angled triangle given the lengths of its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The length of the base of the right-angled triangle."}, "height": {"type": "integer", "description": "The height of the right-angled triangle."}, "unit": {"type": "string", "description": "The unit of measure used. Defaults to 'cm'."}}, "required": ["base", "height"]}}]}, "model_result_raw": "calculate_area(base=8, height=12)", "model_result_decoded": [{"calculate_area": {"base": 8, "height": 12}}], "possible_answer": [{"calculate_area": {"base": [6], "height": [10], "unit": ["cm", ""]}}]}
{"id": 13, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'geometry.circumference' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_12", "question": [[{"role": "user", "content": "Calculate the circumference of a circle with radius 3"}]], "function": [{"name": "geometry.circumference", "description": "Calculate the circumference of a circle given the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}, "units": {"type": "string", "description": "Units for the output circumference measurement. Default is 'cm'."}}, "required": ["radius"]}}]}, "model_result_raw": "[func_name(radius=3, units='cm')]", "model_result_decoded": [{"func_name": {"radius": 3, "units": "cm"}}], "possible_answer": [{"geometry.circumference": {"radius": [3], "units": ["cm", ""]}}]}
{"id": 14, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'interval'. Expected type array, got str. Parameter value: '[2, 4]'."], "error_type": "type_error:simple", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "[calculate_area_under_curve(function=\"x**2\", interval=\"[2, 4]\")]", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": "[2, 4]"}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": 17, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. name 'x' is not defined"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_16", "question": [[{"role": "user", "content": "Calculate the derivative of the function 2x^2 at x = 1."}]], "function": [{"name": "calculus.derivative", "description": "Compute the derivative of a function at a specific value.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "value": {"type": "integer", "description": "The value where the derivative needs to be calculated at."}, "function_variable": {"type": "string", "description": "The variable present in the function, for instance x or y, etc. Default is 'x'."}}, "required": ["function", "value"]}}]}, "model_result_raw": "[calculus.derivative(function=2*x**2, value=1)]", "possible_answer": [{"calculus.derivative": {"function": ["2x**2", "lambda x: 2x**2"], "value": [1], "function_variable": ["x", ""]}}]}
{"id": 22, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'number_theory.gcd' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_21", "question": [[{"role": "user", "content": "Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48."}]], "function": [{"name": "number_theory.gcd", "description": "Compute the greatest common divisor of two given integers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "The first integer."}, "number2": {"type": "integer", "description": "The second integer."}}, "required": ["number1", "number2"]}}]}, "model_result_raw": "[number_theory_gcd(number1=42, number2=56)]", "model_result_decoded": [{"number_theory_gcd": {"number1": 42, "number2": 56}}], "possible_answer": [{"number_theory.gcd": {"number1": [36], "number2": [48]}}]}
{"id": 28, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'final_velocity' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_27", "question": [[{"role": "user", "content": "Calculate the final velocity of a vehicle after accelerating at 2 meters/second^2 for a duration of 5 seconds, starting from a speed of 10 meters/second."}]], "function": [{"name": "final_velocity", "description": "Calculate the final velocity of an object given its initial velocity, acceleration, and time.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object in meters/second."}, "acceleration": {"type": "integer", "description": "The acceleration of the object in meters/second^2."}, "time": {"type": "integer", "description": "The time over which the acceleration is applied in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}]}, "model_result_raw": "final_speed(initial_speed=10, acceleration=2, time=5)", "model_result_decoded": [{"final_speed": {"initial_speed": 10, "acceleration": 2, "time": 5}}], "possible_answer": [{"final_velocity": {"initial_velocity": [10], "acceleration": [2], "time": [5]}}]}
{"id": 29, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'initial_velocity'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_28", "question": [[{"role": "user", "content": "Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds."}]], "function": [{"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object in m/s."}, "time": {"type": "integer", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "float", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}]}, "model_result_raw": "calculate_displacement(initial_e=10, time=5, acceleration=9.8)", "model_result_decoded": [{"calculate_displacement": {"initial_e": 10, "time": 5, "acceleration": 9.8}}], "possible_answer": [{"calculate_displacement": {"initial_velocity": [10], "time": [5], "acceleration": [9.8]}}]}
{"id": 31, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'kinematics.final_velocity_from_distance' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_30", "question": [[{"role": "user", "content": "What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?"}]], "function": [{"name": "kinematics.final_velocity_from_distance", "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.", "parameters": {"type": "dict", "properties": {"acceleration": {"type": "integer", "description": "Acceleration of the object, m/s^2."}, "distance": {"type": "integer", "description": "Distance traveled by the object, m."}, "initial_velocity": {"type": "float", "description": "Initial velocity of the object. Default is 0, m/s"}}, "required": ["acceleration", "distance"]}}]}, "model_result_raw": "[func_name(acceleration=4, distance=300)]", "model_result_decoded": [{"func_name": {"acceleration": 4, "distance": 300}}], "possible_answer": [{"kinematics.final_velocity_from_distance": {"acceleration": [4], "distance": [300], "initial_velocity": ["", 0.0]}}]}
{"id": 32, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'initial_velocity'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_31", "question": [[{"role": "user", "content": "Calculate the final velocity of an object, knowing that it started from rest, accelerated at a rate of 9.8 m/s^2 for a duration of 5 seconds."}]], "function": [{"name": "calculate_final_velocity", "description": "Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object."}, "acceleration": {"type": "float", "description": "The acceleration of the object."}, "time": {"type": "integer", "description": "The time of acceleration."}}, "required": ["initial_velocity", "acceleration", "time"]}}]}, "model_result_raw": "[calculate_final_velocity(initial_speed=0, acceleration=9.8, time=5)]", "model_result_decoded": [{"calculate_final_velocity": {"initial_speed": 0, "acceleration": 9.8, "time": 5}}], "possible_answer": [{"calculate_final_velocity": {"initial_velocity": [0], "acceleration": [9.8], "time": [5]}}]}
{"id": 33, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'initial_velocity'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_32", "question": [[{"role": "user", "content": "Calculate the final speed of an object dropped from 100 m without air resistance."}]], "function": [{"name": "calculate_final_speed", "description": "Calculate the final speed of an object dropped from a certain height without air resistance.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object."}, "height": {"type": "integer", "description": "The height from which the object is dropped."}, "gravity": {"type": "float", "description": "The gravitational acceleration. Default is 9.8 m/s^2."}}, "required": ["initial_velocity", "height"]}}]}, "model_result_raw": "[calculate_final_speed(initial_height=100)]", "model_result_decoded": [{"calculate_final_speed": {"initial_height": 100}}], "possible_answer": [{"calculate_final_speed": {"initial_velocity": [0], "height": [100], "gravity": [9.8, ""]}}]}
{"id": 38, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'route.estimate_time' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_37", "question": [[{"role": "user", "content": "Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey."}]], "function": [{"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey. It should be format as city name such as Boston."}, "end_location": {"type": "string", "description": "The destination for the journey. It should be format as city name such as Boston."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey. Default is an empty list."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[func_name(start_location=\"San Francisco\", end_location=\"Los Angeles\", stops=[\"Santa Barbara\", \"Monterey\"])]", "model_result_decoded": [{"func_name": {"start_location": "San Francisco", "end_location": "Los Angeles", "stops": ["Santa Barbara", "Monterey"]}}], "possible_answer": [{"route.estimate_time": {"start_location": ["San Francisco"], "end_location": ["Los Angeles"], "stops": [["Santa Barbara", "Monterey"], ["Monterey", "Santa Barbara"]]}}]}
{"id": 39, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'charge2': 3e-09. Expected one of [2e-09]."], "error_type": "value_error:others", "prompt": {"id": "simple_38", "question": [[{"role": "user", "content": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?"}]], "function": [{"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}]}, "model_result_raw": "[calculate_electrostatic_potential(charge1=1e-9, charge2=3e-9, distance=0.05)]", "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": 1e-09, "charge2": 3e-09, "distance": 0.05}}], "possible_answer": [{"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}]}
{"id": 43, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'capacitance': 0.01. Expected one of [0.0001]."], "error_type": "value_error:others", "prompt": {"id": "simple_42", "question": [[{"role": "user", "content": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH."}]], "function": [{"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}]}, "model_result_raw": "[calculate_resonant_frequency(inductance=0.05, capacitance=0.01, round_off=2)]", "model_result_decoded": [{"calculate_resonant_frequency": {"inductance": 0.05, "capacitance": 0.01, "round_off": 2}}], "possible_answer": [{"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}]}
{"id": 50, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gauge_pressure': 3. Expected one of [2]."], "error_type": "value_error:others", "prompt": {"id": "simple_49", "question": [[{"role": "user", "content": "Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm."}]], "function": [{"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "dict", "properties": {"atm_pressure": {"type": "integer", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "integer", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}]}, "model_result_raw": "[calc_absolute_pressure(atm_pressure=1, gauge_pressure=3)]", "model_result_decoded": [{"calc_absolute_pressure": {"atm_pressure": 1, "gauge_pressure": 3}}], "possible_answer": [{"calc_absolute_pressure": {"atm_pressure": [1], "gauge_pressure": [2]}}]}
{"id": 51, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'initial_temperature': 5. Expected one of [0]."], "error_type": "value_error:others", "prompt": {"id": "simple_50", "question": [[{"role": "user", "content": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?"}]], "function": [{"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}]}, "model_result_raw": "[entropy_change.calculate(substance=\"ice\", mass=1, initial_temperature=5, final_temperature=100)]", "model_result_decoded": [{"entropy_change.calculate": {"substance": "ice", "mass": 1, "initial_temperature": 5, "final_temperature": 100}}], "possible_answer": [{"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}]}
{"id": 53, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'calc_heat_capacity' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_52", "question": [[{"role": "user", "content": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3."}]], "function": [{"name": "calc_heat_capacity", "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.", "parameters": {"type": "dict", "properties": {"temp": {"type": "integer", "description": "The temperature of the gas in Kelvin."}, "volume": {"type": "integer", "description": "The volume of the gas in m^3."}, "gas": {"type": "string", "description": "Type of gas, with 'air' as default."}}, "required": ["temp", "volume"]}}]}, "model_result_raw": "calc_heat_capacity(temp=298, volume=10)()", "model_result_decoded": [{"": {}}], "possible_answer": [{"calc_heat_capacity": {"temp": [298], "volume": [10], "gas": ["air", ""]}}]}
{"id": 61, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'mutation_type.find' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_60", "question": [[{"role": "user", "content": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464."}]], "function": [{"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "dict", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}]}, "model_result_raw": "mutation_type(snp_id=\"rs6034464\")", "model_result_decoded": [{"mutation_type": {"snp_id": "rs6034464"}}], "possible_answer": [{"mutation_type.find": {"snp_id": ["rs6034464"], "species": ["Homo sapiens", ""]}}]}
{"id": 62, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'weight': 160. Expected one of [150]."], "error_type": "value_error:others", "prompt": {"id": "simple_61", "question": [[{"role": "user", "content": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes."}]], "function": [{"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}]}, "model_result_raw": "[diabetes_prediction(weight=160, height=72, activity_level=\"moderately active\")]", "model_result_decoded": [{"diabetes_prediction": {"weight": 160, "height": 72, "activity_level": "moderately active"}}], "possible_answer": [{"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}]}
{"id": 63, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sequence': 'TGCATCGAGAACGTACGTACG'. Expected one of ['AGTCGATCGAACGTACGTACG']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_62", "question": [[{"role": "user", "content": "Analyze the DNA sequence 'AGTCGATCGAACGTACGTACG' for any potential substitution mutations based on a reference sequence 'AGTCCATCGAACGTACGTACG'."}]], "function": [{"name": "analyze_dna_sequence", "description": "Analyzes the DNA sequence based on a reference sequence and return any potential mutations.", "parameters": {"type": "dict", "properties": {"sequence": {"type": "string", "description": "The DNA sequence to be analyzed."}, "reference_sequence": {"type": "string", "description": "The reference DNA sequence."}, "mutation_type": {"type": "string", "enum": ["insertion", "deletion", "substitution"], "description": "Type of the mutation to be looked for in the sequence. Default to 'substitution'."}}, "required": ["sequence", "reference_sequence"]}}]}, "model_result_raw": "[analyze_dna_sequence(sequence='TGCATCGAGAACGTACGTACG', reference_sequence='TGTCCATCGAACGTACGTACG', mutation_type='substitution')]", "model_result_decoded": [{"analyze_dna_sequence": {"sequence": "TGCATCGAGAACGTACGTACG", "reference_sequence": "TGTCCATCGAACGTACGTACG", "mutation_type": "substitution"}}], "possible_answer": [{"analyze_dna_sequence": {"sequence": ["AGTCGATCGAACGTACGTACG"], "reference_sequence": ["AGTCCATCGAACGTACGTACG"], "mutation_type": ["substitution", ""]}}]}
{"id": 64, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species2': 'gorilla'. Expected one of ['Chimp', 'chimp', 'Chimpanzee', 'chimpanzee']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_63", "question": [[{"role": "user", "content": "Find out how genetically similar a human and a chimp are in percentage."}]], "function": [{"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "dict", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}]}, "model_result_raw": "[genetics.calculate_similarity(species1=\"human\", species2=\"gorilla\", format=\"percentage\")]", "model_result_decoded": [{"genetics.calculate_similarity": {"species1": "human", "species2": "gorilla", "format": "percentage"}}], "possible_answer": [{"genetics.calculate_similarity": {"species1": ["Human", "human"], "species2": ["Chimp", "chimp", "Chimpanzee", "chimpanzee"], "format": ["percentage", ""]}}]}
{"id": 66, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'land_area': 8000000. Expected one of [8500000]."], "error_type": "value_error:others", "prompt": {"id": "simple_65", "question": [[{"role": "user", "content": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers."}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "integer", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}]}, "model_result_raw": "[calculate_density(country=\"Brazil\", year=\"2022\", population=213000000, land_area=8000000)]", "model_result_decoded": [{"calculate_density": {"country": "Brazil", "year": "2022", "population": 213000000, "land_area": 8000000}}], "possible_answer": [{"calculate_density": {"country": ["Brazil"], "year": ["2022"], "population": [213000000], "land_area": [8500000]}}]}
{"id": 71, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'vehicle_type'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_70", "question": [[{"role": "user", "content": "What is the carbon footprint of a gas-powered vehicle driving 1500 miles in a year?"}]], "function": [{"name": "calculate_vehicle_emission", "description": "Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.", "parameters": {"type": "dict", "properties": {"vehicle_type": {"type": "string", "description": "The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle."}, "miles_driven": {"type": "integer", "description": "The number of miles driven per year."}, "emission_factor": {"type": "float", "description": "Optional emission factor to calculate emissions, in g/mile. Default factor is 355.48."}}, "required": ["vehicle_type", "miles_driven"]}}]}, "model_result_raw": "[calculate_vehicle_emission(type=\"gas\", miles_driven=1500)]", "model_result_decoded": [{"calculate_vehicle_emission": {"type": "gas", "miles_driven": 1500}}], "possible_answer": [{"calculate_vehicle_emission": {"vehicle_type": ["gas"], "miles_driven": [1500], "emission_factor": ["", 355.48]}}]}
{"id": 75, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'duration': 7200. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_74", "question": [[{"role": "user", "content": "Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours."}]], "function": [{"name": "calculate_bacteria_evolution_rate", "description": "Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.", "parameters": {"type": "dict", "properties": {"start_population": {"type": "integer", "description": "The starting population of bacteria."}, "duplication_frequency": {"type": "integer", "description": "The frequency of bacteria duplication per hour."}, "duration": {"type": "integer", "description": "Total duration in hours."}, "generation_time": {"type": "integer", "description": "The average generation time of the bacteria in minutes. Default is 20 minutes"}}, "required": ["start_population", "duplication_frequency", "duration"]}}]}, "model_result_raw": "[calculate_bacteria_evolution_rate(start_population=5000, duplication_frequency=1, duration=7200)]", "model_result_decoded": [{"calculate_bacteria_evolution_rate": {"start_population": 5000, "duplication_frequency": 1, "duration": 7200}}], "possible_answer": [{"calculate_bacteria_evolution_rate": {"start_population": [5000], "duplication_frequency": [1], "duration": [6], "generation_time": [20, ""]}}]}
{"id": 83, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [10, 14, 17, 19, 22, 25, 28]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "[calculate_average(numbers=[10, 14, 17, 19, 22, 25, 28])]", "model_result_decoded": [{"calculate_average": {"numbers": [10, 14, 17, 19, 22, 25, 28]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": 88, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'array_sort' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order='ascending')()]", "model_result_decoded": [{"": {}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": 91, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_name': 'DEF Corp'. Expected one of ['ABC Ltd.']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_90", "question": [[{"role": "user", "content": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'"}]], "function": [{"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, "required": ["company_name", "employee_id"]}}]}, "model_result_raw": "[employee.fetch_data(company_name=\"DEF Corp\", employee_id=678, data_field=[\"Personal Info\", \"Job History\"])]", "model_result_decoded": [{"employee.fetch_data": {"company_name": "DEF Corp", "employee_id": 678, "data_field": ["Personal Info", "Job History"]}}], "possible_answer": [{"employee.fetch_data": {"company_name": ["ABC Ltd."], "employee_id": [345], "data_field": [["Personal Info", "Job History"]]}}]}
{"id": 92, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'operating days are Sundays'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "Get the highest rated sushi restaurant in Boston, that opens on Sundays."}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "[get_restaurant(cuisine=\"sushi\", location=\"Boston\", condition=\"operating days are Sundays\")]", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "operating days are Sundays"}}], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": 97, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'value': \"'engineer'\". Expected one of ['engineer']."], "error_type": "value_error:dict_value", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "[database.query(table=\"user\", conditions=[{\"field\": \"age\", \"operation\": \">\", \"value\": \"25\"}, {\"field\": \"job\", \"operation\": \"=\", \"value\": \"'engineer'\"}])]", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "job", "operation": "=", "value": "'engineer'"}]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": 102, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'to_unit' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_101", "question": [[{"role": "user", "content": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds."}]], "function": [{"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}]}, "model_result_raw": "[calculate_speed(distance=450, time=20)]", "model_result_decoded": [{"calculate_speed": {"distance": 450, "time": 20}}], "possible_answer": [{"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}]}
{"id": 104, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": 127, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'independent_variables': ['engine_size', 'city_mpg']. Expected one of [['engine_size', 'fuel_economy']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_126", "question": [[{"role": "user", "content": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?"}]], "function": [{"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}]}, "model_result_raw": "[linear_regression.get_r_squared(dataset_path=\"C:/data/cars.csv\", independent_variables=[\"engine_size\", \"city_mpg\"], dependent_variable=\"car_price\")]", "model_result_decoded": [{"linear_regression.get_r_squared": {"dataset_path": "C:/data/cars.csv", "independent_variables": ["engine_size", "city_mpg"], "dependent_variable": "car_price"}}], "possible_answer": [{"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}]}
{"id": 129, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_payout': 500000000. Expected one of [50000000]."], "error_type": "value_error:others", "prompt": {"id": "simple_128", "question": [[{"role": "user", "content": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?"}]], "function": [{"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}]}, "model_result_raw": "[finance.calculate_quarterly_dividend_per_share(total_payout=500000000, outstanding_shares=1000000000)]", "model_result_decoded": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": 500000000, "outstanding_shares": 1000000000}}], "possible_answer": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}]}
{"id": 135, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_return': 0.08. Expected one of [0.07]."], "error_type": "value_error:others", "prompt": {"id": "simple_134", "question": [[{"role": "user", "content": "Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%."}]], "function": [{"name": "investment.predictProfit", "description": "Predict the profit for given investment after specified number of years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The amount invested in dollars."}, "annual_return": {"type": "float", "description": "The annual return rate of the investment."}, "years": {"type": "integer", "description": "The time period in years for which the investment is made."}}, "required": ["investment_amount", "annual_return", "years"]}}]}, "model_result_raw": "[investment.predictProfit(investment_amount=5000, annual_return=0.08, years=5)]", "model_result_decoded": [{"investment.predictProfit": {"investment_amount": 5000, "annual_return": 0.08, "years": 5}}], "possible_answer": [{"investment.predictProfit": {"investment_amount": [5000], "annual_return": [0.07], "years": [5]}}]}
{"id": 138, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'calculate_stock_return' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_137", "question": [[{"role": "user", "content": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years."}]], "function": [{"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}]}, "model_result_raw": "calculate_stock_return(investment_amount=5000, annual_growth_rate=0.06, holding_period=5)()", "model_result_decoded": [{"": {}}], "possible_answer": [{"calculate_stock_return": {"investment_amount": [5000], "annual_growth_rate": [0.06], "holding_period": [5], "dividends": ["", false]}}]}
{"id": 144, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company': 'MSFT'. Expected one of ['AAPL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_143", "question": [[{"role": "user", "content": "'Get stock price of Apple for the last 5 days in NASDAQ.'"}]], "function": [{"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}]}, "model_result_raw": "[get_stock_price(company=\"MSFT\", days=5, exchange=\"NASDAQ\")]", "model_result_decoded": [{"get_stock_price": {"company": "MSFT", "days": 5, "exchange": "NASDAQ"}}], "possible_answer": [{"get_stock_price": {"company": ["AAPL"], "days": [5], "exchange": ["NASDAQ", ""]}}]}
{"id": 150, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'company_names'. Expected type array, got str. Parameter value: 'Microsoft'."], "error_type": "type_error:simple", "prompt": {"id": "simple_149", "question": [[{"role": "user", "content": "What's the current stock price of Apple and Microsoft?"}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}]}, "model_result_raw": "[get_stock_price(company_names=\"Apple\", company_names=\"Microsoft\")]", "model_result_decoded": [{"get_stock_price": {"company_names": "Microsoft"}}], "possible_answer": [{"get_stock_price": {"company_names": [["Apple", "Microsoft"], [["Apple"], ["Microsoft"]], ["AAPL", "MSFT"]]}}]}
{"id": 152, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": [[{"role": "user", "content": "Find the highest grossing bank in the U.S for year 2020."}]], "function": [{"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}]}, "model_result_raw": "[highest_grossing_banks(country=\"U.S\", year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S", "year": 2020}}], "possible_answer": [{"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}]}
{"id": 159, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'X'. Expected one of ['Mr. X']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_158", "question": [[{"role": "user", "content": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015."}]], "function": [{"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}]}, "model_result_raw": "[get_criminal_records(name=X, location=\"New York\", from_year=2012, to_year=2015)]", "model_result_decoded": [{"get_criminal_records": {"name": "X", "location": "New York", "from_year": 2012, "to_year": 2015}}], "possible_answer": [{"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}]}
{"id": 163, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'parties'. Expected type array, got tuple. Parameter value: ('John', 'Alice')."], "error_type": "type_error:simple", "prompt": {"id": "simple_162", "question": [[{"role": "user", "content": "Generate a customized law contract between John and Alice for rental agreement in California."}]], "function": [{"name": "generate_law_contract", "description": "Generates a customized law contract given involved parties, contract type and location.", "parameters": {"type": "dict", "properties": {"parties": {"type": "array", "items": {"type": "string"}, "description": "Parties involved in the contract."}, "contract_type": {"type": "string", "description": "Type of the contract."}, "location": {"type": "string", "description": "Location where the contract will be in effect."}}, "required": ["parties", "contract_type", "location"]}}]}, "model_result_raw": "[generate_law_contract(parties=(\"John\", \"Alice\"), contract_type=\"rental agreement\", location=\"California\")]", "model_result_decoded": [{"generate_law_contract": {"parties": ["John", "Alice"], "contract_type": "rental agreement", "location": "California"}}], "possible_answer": [{"generate_law_contract": {"parties": [["John", "Alice"], ["John", "Alice"]], "contract_type": ["Rental Agreement", "rental agreement"], "location": ["California", "CA"]}}]}
{"id": 164, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara county'. Expected one of ['Santa Clara']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_163", "question": [[{"role": "user", "content": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response."}]], "function": [{"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}]}, "model_result_raw": "[property_records.get(address=\"123 main street\", parcel_number=\"1234567890\", county=\"Santa Clara county\", include_owner=True)]", "model_result_decoded": [{"property_records.get": {"address": "123 main street", "parcel_number": "1234567890", "county": "Santa Clara county", "include_owner": true}}], "possible_answer": [{"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}]}
{"id": 167, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "[lawyer.find_nearby(city=\"Chicago\", specialty=[\"Divorce\"], fee=400)]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": ["Divorce"], "fee": 400}}], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": 174, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'year_range'. Expected type array, got str. Parameter value: '[2015, 2021]'."], "error_type": "type_error:simple", "prompt": {"id": "simple_173", "question": [[{"role": "user", "content": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York."}]], "function": [{"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}]}, "model_result_raw": "[law_case_search(topic=\"land disputes\", year_range=\"[2015, 2021]\", location=\"New York\", judicial_system=\"state\")]", "model_result_decoded": [{"law_case_search": {"topic": "land disputes", "year_range": "[2015, 2021]", "location": "New York", "judicial_system": "state"}}], "possible_answer": [{"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}]}
{"id": 176, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'law_type'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_175", "question": [[{"role": "user", "content": "How many months of experience a Lawyer John Doe has on handling Bankruptcy cases."}]], "function": [{"name": "lawyer.get_experience", "description": "Retrieve months of experience of a Lawyer on handling certain type of law cases.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the Lawyer."}, "law_type": {"type": "string", "description": "The type of law case. eg. Bankruptcy"}}, "required": ["name", "law_type"]}}]}, "model_result_raw": "[lawyer.get_experience(type=\"Bankruptcy\", name=\"John Doe\")]", "model_result_decoded": [{"lawyer.get_experience": {"type": "Bankruptcy", "name": "John Doe"}}], "possible_answer": [{"lawyer.get_experience": {"name": ["John Doe"], "law_type": ["Bankruptcy"]}}]}
{"id": 186, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unmatched ']' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_185", "question": [[{"role": "user", "content": "What will be the weather in New York in the next 72 hours including the precipitation?"}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast. Default is false."}}, "required": ["location", "duration"]}}]}, "model_result_raw": "[detailed_weather_forecast(location=\"New York\", duration=72, include_precipitation=True)]()", "possible_answer": [{"detailed_weather_forecast": {"location": ["New York", "New York, USA"], "duration": [72], "include_precipitation": [true]}}]}
{"id": 192, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'amount': 3. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"id": "simple_191", "question": [[{"role": "user", "content": "Find me the 5 tallest mountains within 50km of Denver, Colorado."}]], "function": [{"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "integer", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}]}, "model_result_raw": "[locate_tallest_mountains(location=\"Denver, Colorado\", radius=50, amount=3)]", "model_result_decoded": [{"locate_tallest_mountains": {"location": "Denver, Colorado", "radius": 50, "amount": 3}}], "possible_answer": [{"locate_tallest_mountains": {"location": ["Denver, Colorado", "Denver", "CO"], "radius": [50], "amount": [5]}}]}
{"id": 215, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'genre': 'month rock'. Expected one of ['Rock', 'rock']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_214", "question": [[{"role": "user", "content": "Search for upcoming month rock concerts in New York."}]], "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}]}, "model_result_raw": "[event_finder.find_upcoming(location=\"New York, NY\", genre=\"month rock\", days_ahead=30)]", "model_result_decoded": [{"event_finder.find_upcoming": {"location": "New York, NY", "genre": "month rock", "days_ahead": 30}}], "possible_answer": [{"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}]}
{"id": 219, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'patient.get_mri_report' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_218", "question": [[{"role": "user", "content": "Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'."}]], "function": [{"name": "patient.get_mri_report", "description": "Fetch the brain MRI report of the patient for a given status.", "parameters": {"type": "dict", "properties": {"patient_id": {"type": "string", "description": "The patient identifier."}, "mri_type": {"type": "string", "description": "Type of the MRI. Default to be 'brain'.", "enum": ["brain", "spinal", "chest", "abdominal"]}, "status": {"type": "string", "description": "Status of the report, could be 'in progress', 'concluded' or 'draft'.", "enum": ["in progress", "concluded", "draft"]}}, "required": ["patient_id", "status"]}}]}, "model_result_raw": "patient_get_mri_report(patient_id=546382, mri_type=\"brain\", status=\"concluded\")", "model_result_decoded": [{"patient_get_mri_report": {"patient_id": 546382, "mri_type": "brain", "status": "concluded"}}], "possible_answer": [{"patient.get_mri_report": {"patient_id": ["546382"], "mri_type": ["brain", ""], "status": ["concluded"]}}]}
{"id": 226, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'psych_research.get_preference' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_225", "question": [[{"role": "user", "content": "What is the percentage of population preferring digital reading over physical books?"}]], "function": [{"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "dict", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}]}, "model_result_raw": "psych_research.get_percentage(category=\"reading\", option_one=\"e-books\", option_two=\"traditional books\")[]", "model_result_decoded": [{"psych_research.get_percentage": {"category": "reading", "option_one": "e-books", "option_two": "traditional books"}}], "possible_answer": [{"psych_research.get_preference": {"category": ["reading"], "option_one": ["digital reading", "digital"], "option_two": ["physical book", "physical", "physical books"], "demographic": ["", "all"]}}]}
{"id": 230, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'scale': 'high'. Expected one of ['medium', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_229", "question": [[{"role": "user", "content": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?"}]], "function": [{"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}]}, "model_result_raw": "[get_bigfive_scores(characteristics=[\"efficient\", \"organized\", \"easygoing\", \"compassionate\"], scale=\"high\")]", "model_result_decoded": [{"get_bigfive_scores": {"characteristics": ["efficient", "organized", "easygoing", "compassionate"], "scale": "high"}}], "possible_answer": [{"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}]}
{"id": 232, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unmatched ')' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_231", "question": [[{"role": "user", "content": "Provide key war events in German history from 1871 to 1945."}]], "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. Default to 'all', which all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}]}, "model_result_raw": "[history.get_key_events(country=\"Germany\", start_year=1871, end_year=1945, event_type=[\"War\"]))", "possible_answer": [{"history.get_key_events": {"country": ["Germany", "DE"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}]}
{"id": 235, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'history_eu.fetch_events' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "history_eu_fetch_events(century=19, region=\"Western\", category=\"Wars\")", "model_result_decoded": [{"history_eu_fetch_events": {"century": 19, "region": "Western", "category": "Wars"}}], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": 241, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'history_api.get_president_by_year' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_240", "question": [[{"role": "user", "content": "Who was the President of the United States in 1940?"}]], "function": [{"name": "history_api.get_president_by_year", "description": "Get the name of the U.S. President for a specified year.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year you want to know the U.S. president of."}, "full_term_only": {"type": "boolean", "description": "Flag to determine if we should only return presidents that served a full term for the specified year.", "default": false}}, "required": ["year"]}}]}, "model_result_raw": "[history_api_get_president_by_year(year=1940)]", "model_result_decoded": [{"history_api_get_president_by_year": {"year": 1940}}], "possible_answer": [{"history_api.get_president_by_year": {"year": [1940], "full_term_only": ["", true, false]}}]}
{"id": 259, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unmatched ']' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_258", "question": [[{"role": "user", "content": "Mix yellow and blue colors and adjust the lightness level to 60 percent."}]], "function": [{"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "dict", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50."}}, "required": ["color1", "color2"]}}]}, "model_result_raw": "[mix_paint_color(color1=\"yellow\", color2=\"blue\", lightness=60)]()", "possible_answer": [{"mix_paint_color": {"color1": ["yellow"], "color2": ["blue"], "lightness": [60]}}]}
{"id": 268, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'now'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "[find_exhibition(location=\"New York City, NY\", art_form=\"modern sculpture\", month=\"now\", user_ratings=\"high\")]", "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "modern sculpture", "month": "now", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": 269, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'sculpture_locator.find_by_artist' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_268", "question": [[{"role": "user", "content": "Find me the sculptures of Michelangelo with material Marble in Rome, Italy."}]], "function": [{"name": "sculpture_locator.find_by_artist", "description": "Locate the sculptures of specific artist by material and location", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the Artist of the sculpture"}, "material": {"type": "string", "description": "Material of the sculpture."}, "location": {"type": "string", "description": "The location where you want to find the sculpture. Default is 'all' if not specified."}}, "required": ["artist", "material"]}}]}, "model_result_raw": "[find_by_artist(artist=\"Michelangelo\", material=\"Marble\", location=\"Rome, Italy\")]", "model_result_decoded": [{"find_by_artist": {"artist": "Michelangelo", "material": "Marble", "location": "Rome, Italy"}}], "possible_answer": [{"sculpture_locator.find_by_artist": {"artist": ["Michelangelo"], "material": ["Marble"], "location": ["Rome", "Rome, Italy"]}}]}
{"id": 272, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'mode' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_271", "question": [[{"role": "user", "content": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?"}]], "function": [{"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}]}, "model_result_raw": "[analyze_structure(building_id=\"B1004\", floors=[2, 3, 4])]", "model_result_decoded": [{"analyze_structure": {"building_id": "B1004", "floors": [2, 3, 4]}}], "possible_answer": [{"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}]}
{"id": 274, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'Louvre'. Expected one of ['Louvre Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_273", "question": [[{"role": "user", "content": "Find out the open hours for the Louvre Museum in Paris."}]], "function": [{"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours. Default 'Monday'."}}, "required": ["name", "location"]}}]}, "model_result_raw": "[museum.get_hours(name=\"Louvre\", location=\"Paris\", day=\"Monday\")]", "model_result_decoded": [{"museum.get_hours": {"name": "Louvre", "location": "Paris", "day": "Monday"}}], "possible_answer": [{"museum.get_hours": {"name": ["Louvre Museum"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}]}
{"id": 277, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum': 'Mus\u00e9ein'. Expected one of ['Louvre Museum', 'Louvre']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_276", "question": [[{"role": "user", "content": "Get the working hours of Louvre Museum in Paris."}]], "function": [{"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Default is 'Monday'"}}, "required": ["museum", "location"]}}]}, "model_result_raw": "[museum_working_hours.get(museum=\"Mus\u00e9ein\", location=\"Paris, France\")]", "model_result_decoded": [{"museum_working_hours.get": {"museum": "Mus\u00e9ein", "location": "Paris, France"}}], "possible_answer": [{"museum_working_hours.get": {"museum": ["Louvre Museum", "Louvre"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}]}
{"id": 290, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. positional argument follows keyword argument (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_289", "question": [[{"role": "user", "content": "Find concerts near me in Seattle that plays jazz music."}]], "function": [{"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "genre": {"type": "string", "description": "Genre of music to be played at the concert."}}, "required": ["location", "genre"]}}]}, "model_result_raw": "concert.find_nearby(location=Seattle, WA, genre=jazz)", "possible_answer": [{"concert.find_nearby": {"location": ["Seattle", "Seattle, WA"], "genre": ["jazz", "Jazz"]}}]}
{"id": 293, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'progression': ['D', 'A', 'B']. Expected one of [['C', 'F', 'G']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_292", "question": [[{"role": "user", "content": "Compose a simple piano melody with a progression of C, F and G for 4 measures."}]], "function": [{"name": "compose_melody", "description": "Compose a melody using the specified chord progression for a certain number of measures on specified instrument.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The progression of chords."}, "measures": {"type": "integer", "description": "The number of measures of the melody."}, "instrument": {"type": "string", "description": "The instrument for the composition. Default is 'Piano'."}}, "required": ["progression", "measures"]}}]}, "model_result_raw": "compose_melody(progression=['D', 'A', 'B'], measures=4)", "model_result_decoded": [{"compose_melody": {"progression": ["D", "A", "B"], "measures": 4}}], "possible_answer": [{"compose_melody": {"progression": [["C", "F", "G"]], "measures": [4], "instrument": ["Piano", ""]}}]}
{"id": 294, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unmatched ']' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_293", "question": [[{"role": "user", "content": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes."}]], "function": [{"name": "music_composer.create_mix", "description": "Create a mix of a song based on a particular music scale and duration", "parameters": {"type": "dict", "properties": {"scale": {"type": "string", "description": "The musical scale to be used. E.g: C Major, A Minor, etc."}, "note_duration": {"type": "string", "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", "enum": ["whole", "half", "quarter", "eighth", "sixteenth"]}, "track_length": {"type": "integer", "description": "Length of the mix track in seconds."}}, "required": ["scale", "note_duration", "track_length"]}}]}, "model_result_raw": "[music_composer_create_mix(scale=\"C major\", note_duration=\"quarter\", track_length=180)]()", "possible_answer": [{"music_composer.create_mix": {"scale": ["C Major"], "note_duration": ["quarter"], "track_length": [180]}}]}
{"id": 295, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'music_generation.create_chord_progression' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_294", "question": [[{"role": "user", "content": "Generate a major chord progression in C key with four chords."}]], "function": [{"name": "music_generation.create_chord_progression", "description": "Create a chord progression in a specific key and number of chords.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key for the chord progression."}, "chords": {"type": "integer", "description": "Number of chords in the progression."}, "progression_type": {"type": "string", "description": "The type of the chord progression. Optional parameter. Default is 'major'."}}, "required": ["key", "chords"]}}]}, "model_result_raw": "[music_generation_create_chord_progression(key=\"C\", chords=4)]", "model_result_decoded": [{"music_generation_create_chord_progression": {"key": "C", "chords": 4}}], "possible_answer": [{"music_generation.create_chord_progression": {"key": ["C"], "chords": [4], "progression_type": ["major", ""]}}]}
{"id": 299, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'E#'. Expected one of ['C#']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_298", "question": [[{"role": "user", "content": "What key signature does C# major have?"}]], "function": [{"name": "music_theory.key_signature", "description": "Return the key signature of a major or minor scale.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, "scale_type": {"type": "string", "enum": ["major", "minor"], "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, "required": ["key"]}}]}, "model_result_raw": "[music_theory.key_signature(key=\"E#\", scale_type=\"major\")]", "model_result_decoded": [{"music_theory.key_signature": {"key": "E#", "scale_type": "major"}}], "possible_answer": [{"music_theory.key_signature": {"key": ["C#"], "scale_type": ["major", ""]}}]}
{"id": 300, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'D_flat'. Expected one of ['C#', 'C sharp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_299", "question": [[{"role": "user", "content": "What is the musical scale associated with C sharp major?"}]], "function": [{"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}]}, "model_result_raw": "[musical_scale(key=\"D_flat\", scale_type=\"major\")]", "model_result_decoded": [{"musical_scale": {"key": "D_flat", "scale_type": "major"}}], "possible_answer": [{"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", ""]}}]}
{"id": 302, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'C_major'. Expected one of ['C']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_301", "question": [[{"role": "user", "content": "What is the third major chord in C major scale?"}]], "function": [{"name": "get_third_chord", "description": "Calculate the third major chord in a given key.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the scale."}, "type": {"type": "string", "description": "Type of the scale, either major or minor. Default is 'major'."}}, "required": ["key"]}}]}, "model_result_raw": "[get_third_chord(key=\"C_major\")]", "model_result_decoded": [{"get_third_chord": {"key": "C_major"}}], "possible_answer": [{"get_third_chord": {"key": ["C"], "type": ["major", ""]}}]}
{"id": 305, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'Cleveland Cavaliers'. Expected one of ['Los Angeles Lakers', 'LAL', 'Lakers']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_304", "question": [[{"role": "user", "content": "Get point and rebound stats for player 'LeBron James' from last basketball game"}]], "function": [{"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}]}, "model_result_raw": "[player_stats.getLastGame(player_name=\"LeBron James\", team=\"Cleveland Cavaliers\", metrics=[\"Points\", \"Rebounds\"])]", "model_result_decoded": [{"player_stats.getLastGame": {"player_name": "LeBron James", "team": "Cleveland Cavaliers", "metrics": ["Points", "Rebounds"]}}], "possible_answer": [{"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}]}
{"id": 307, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': '\u5b5f\u7e41\u661f'. Expected one of ['Virat Kohli']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_306", "question": [[{"role": "user", "content": "Find average batting score of a cricketer, Virat Kohli for past 10 matches"}]], "function": [{"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}]}, "model_result_raw": "[average_batting_score(player_name=\"\u5b5f\u7e41\u661f\", matches=10)]", "model_result_decoded": [{"average_batting_score": {"player_name": "\u5b5f\u7e41\u661f", "matches": 10}}], "possible_answer": [{"average_batting_score": {"player_name": ["Virat Kohli"], "matches": [10], "match_format": ["T20", ""]}}]}
{"id": 308, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'teams'. Expected type array, got str. Parameter value: 'Lakers Clippers'."], "error_type": "type_error:simple", "prompt": {"id": "simple_307", "question": [[{"role": "user", "content": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?"}]], "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}]}, "model_result_raw": "[game_result.get_winner(teams=\"Lakers Clippers\", date=\"2021-01-28\")]", "model_result_decoded": [{"game_result.get_winner": {"teams": "Lakers Clippers", "date": "2021-01-28"}}], "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}]}
{"id": 314, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'celebrity_net_worth.get' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_313", "question": [[{"role": "user", "content": "What's the total worth in euro of Messi according to latest data?"}]], "function": [{"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}]}, "model_result_raw": "[celebrist_net_worth.get(name=\"Messi\", currency=\"EUR\")]", "model_result_decoded": [{"celebrist_net_worth.get": {"name": "Messi", "currency": "EUR"}}], "possible_answer": [{"celebrity_net_worth.get": {"name": ["Lionel Messi", "Messi"], "currency": ["EUR", "euro"]}}]}
{"id": 315, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'sports_celebrity.get_major_achievements' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_314", "question": [[{"role": "user", "content": "Find all the major achievements of the footballer Lionel Messi."}]], "function": [{"name": "sports_celebrity.get_major_achievements", "description": "Returns a list of major achievements of a particular sports celebrity.", "parameters": {"type": "dict", "properties": {"celebrity_name": {"type": "string", "description": "Name of the sports celebrity."}, "sports": {"type": "string", "description": "Type of sports the celebrity involved in. Default is Football."}, "team": {"type": "string", "description": "Optional. Team where celebrity currently plays. Default is 'all'"}}, "required": ["celebrity_name"]}}]}, "model_result_raw": "[sports_celebritie.get_major_achievements(celebr_name=\"Lionel Messi\", sports=\"Football\")]", "model_result_decoded": [{"sports_celebritie.get_major_achievements": {"celebr_name": "Lionel Messi", "sports": "Football"}}], "possible_answer": [{"sports_celebrity.get_major_achievements": {"celebrity_name": ["Lionel Messi", "Messi"], "sports": ["Football", "Soccer", ""], "team": ["", "all"]}}]}
{"id": 321, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'sports_ranking.get_team_position' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_320", "question": [[{"role": "user", "content": "Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details"}]], "function": [{"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}]}, "model_result_raw": "[sports_ranking_get_team_position(team=\"Golden State Warriors\", season=\"2022-2023\", detailed=True)]", "model_result_decoded": [{"sports_ranking_get_team_position": {"team": "Golden State Warriors", "season": "2022-2023", "detailed": true}}], "possible_answer": [{"sports_ranking.get_team_position": {"team": ["Golden State Warriors", "GSW"], "season": ["2022-2023"], "detailed": [true]}}]}
{"id": 324, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'sports_ranking.get_top_player' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_323", "question": [[{"role": "user", "content": "Who is ranked as the top player in woman tennis?"}]], "function": [{"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "[sports_ranking_get_top_player(sport=\"tennis\", gender=\"women\")]", "model_result_decoded": [{"sports_ranking_get_top_player": {"sport": "tennis", "gender": "women"}}], "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": 331, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': 'Ticket to Ride'. Expected one of ['Catan']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "What's the average review rating and the age range for the board game 'Catan'?"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "[board_game_info(game_name=\"Ticket to Ride\", info_required=['average_review_rating', 'age_range'])]", "model_result_decoded": [{"board_game_info": {"game_name": "Ticket to Ride", "info_required": ["average_review_rating", "age_range"]}}], "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": 337, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'num_cards': -3. Expected one of [3]."], "error_type": "value_error:others", "prompt": {"id": "simple_336", "question": [[{"role": "user", "content": "Shuffle a deck of cards, and draw 3 cards from the top."}]], "function": [{"name": "cards.shuffle_and_draw", "description": "Shuffle a standard deck of 52 cards and draw a specified number of cards from the top.", "parameters": {"type": "dict", "properties": {"num_cards": {"type": "integer", "description": "Number of cards to be drawn. The default is 1 if no value is provided."}}, "required": ["num_cards"]}}]}, "model_result_raw": "[cards.shuffle_and_draw(num_cards=-3)]", "model_result_decoded": [{"cards.shuffle_and_draw": {"num_cards": -3}}], "possible_answer": [{"cards.shuffle_and_draw": {"num_cards": [3]}}]}
{"id": 338, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'players'. Expected type array, got str. Parameter value: \"['Alex', 'Sam', 'Robert', 'Steve']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_337", "question": [[{"role": "user", "content": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?"}]], "function": [{"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}]}, "model_result_raw": "poker_game_winner(players=\"['Alex', 'Sam', 'Robert', 'Steve']\", cards=\"{'Alex': ['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']}\", type=\"Texas Holdem\")", "model_result_decoded": [{"poker_game_winner": {"players": "['Alex', 'Sam', 'Robert', 'Steve']", "cards": "{'Alex': ['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']}", "type": "Texas Holdem"}}], "possible_answer": [{"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}]}
{"id": 341, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'card_games.poker_determine_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_340", "question": [[{"role": "user", "content": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660."}]], "function": [{"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "dict", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}]}, "model_result_raw": "poker_determine_winner(player1=John, hand1=['8\u2665', '10\u2665', 'J\u2665', 'Q\u2665', 'K\u2665'], player2=Mike, hand2=['9\u2660', 'J\u2660', '10\u2660', 'Q\u2660', 'K\u2660'])", "model_result_decoded": [{"poker_determine_winner": {"player1": "John", "hand1": ["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"], "player2": "Mike", "hand2": ["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]}}], "possible_answer": [{"card_games.poker_determine_winner": {"player1": ["John"], "hand1": [["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"]], "player2": ["Mike"], "hand2": [["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]]}}]}
{"id": 348, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'soccer.get_last_match' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_347", "question": [[{"role": "user", "content": "Get me the details of the last game played by Liverpool F.C. Include its statistics."}]], "function": [{"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}]}, "model_result_raw": "[soccer_get_last_match(team_name=\"Liverpool F.C.\", include_stats=True)]", "model_result_decoded": [{"soccer_get_last_match": {"team_name": "Liverpool F.C.", "include_stats": true}}], "possible_answer": [{"soccer.get_last_match": {"team_name": ["Liverpool F.C.", "Liverpool"], "include_stats": [true]}}]}
{"id": 352, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_351", "question": [[{"role": "user", "content": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10."}]], "function": [{"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "float", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}]}, "model_result_raw": "[platform=\"Windows 10\", rating=4.5]", "possible_answer": [{"multiplayer_game_finder": {"platform": ["Windows 10"], "rating": [4.5], "genre": ["", "Action"]}}]}
{"id": 353, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'gamespot.getAverageUserScore' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_352", "question": [[{"role": "user", "content": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot."}]], "function": [{"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}]}, "model_result_raw": "[gamepot.getAverageUserScore(game_name=\"The Legend of Zelda: Breath of the Wild\", platform=\"all platforms\")]", "model_result_decoded": [{"gamepot.getAverageUserScore": {"game_name": "The Legend of Zelda: Breath of the Wild", "platform": "all platforms"}}], "possible_answer": [{"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}]}
{"id": 361, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipeName': 'spaghetti carbonara'. Expected one of ['pasta carbonara']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_360", "question": [[{"role": "user", "content": "Find a recipe for pasta carbonara which contains only less than 500 calories."}]], "function": [{"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}]}, "model_result_raw": "[find_recipe(recipeName=\"spaghetti carbonara\", maxCalories=500)]", "model_result_decoded": [{"find_recipe": {"recipeName": "spaghetti carbonara", "maxCalories": 500}}], "possible_answer": [{"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}]}
{"id": 365, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Queens'. Expected one of ['Brooklyn', 'Brooklyn, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_364", "question": [[{"role": "user", "content": "Can I find an Italian restaurant with Gluten-free options near Brooklyn?"}]], "function": [{"name": "find_restaurant", "description": "Locate nearby restaurants based on user defined criteria", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where user wants to search for a restaurant."}, "type": {"type": "string", "description": "The type of the cuisine/restaurant."}, "diet_option": {"type": "string", "description": "Special dietary preferences."}}, "required": ["location", "type", "diet_option"]}}]}, "model_result_raw": "[find_restaurant(location=\"Queens\", type=\"Italian\", diet_option=\"Gluten-free\")]", "model_result_decoded": [{"find_restaurant": {"location": "Queens", "type": "Italian", "diet_option": "Gluten-free"}}], "possible_answer": [{"find_restaurant": {"location": ["Brooklyn", "Brooklyn, NY"], "type": ["Italian"], "diet_option": ["Gluten-free"]}}]}
{"id": 367, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'value': 3. Expected one of [2]."], "error_type": "value_error:others", "prompt": {"id": "simple_366", "question": [[{"role": "user", "content": "How many teaspoons are in 2 tablespoons for measurement in my recipe?"}]], "function": [{"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "integer", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 1."}}, "required": ["value", "from_unit", "to_unit"]}}]}, "model_result_raw": "[recipe.unit_conversion(value=3, from_unit=\"tablespoon\", to_unit=\"teaspoon\")]", "model_result_decoded": [{"recipe.unit_conversion": {"value": 3, "from_unit": "tablespoon", "to_unit": "teaspoon"}}], "possible_answer": [{"recipe.unit_conversion": {"value": [2], "from_unit": ["tablespoon", "tbsp"], "to_unit": ["teaspoon", "tsp"], "precision": [1, ""]}}]}
{"id": 368, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_367", "question": [[{"role": "user", "content": "Find me a vegan recipe for brownies which prep time is under 30 minutes."}]], "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "[find_recipe(dietary_restrictions=\"vegan\", recipe_type=\"brownies\", time=30)]", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 30}}], "possible_answer": [{"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}]}
{"id": 370, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'categories': ['Organic', 'Fruits']. Expected one of [['Organic', 'Vegetables', 'Fruits'], ['Organic', 'Fruits', 'Vegetables'], ['Vegetables', 'Fruits', 'Organic'], ['Fruits', 'Vegetables', 'Organic'], ['Fruits', 'Organic', 'Vegetables'], ['Vegetables', 'Organic', 'Fruits']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "Find a grocery store near me with organic fruits and vegetables in Houston."}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "[grocery_store.find_nearby(location=\"Houston, TX\", categories=[\"Organic\", \"Fruits\"])]", "model_result_decoded": [{"grocery_store.find_nearby": {"location": "Houston, TX", "categories": ["Organic", "Fruits"]}}], "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": 371, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "[safeway.order(location=\"Palo Alto, CA\", items=[\"olive oil\", \"rice\"], quantity=[3, 5])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": 372, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_371", "question": [[{"role": "user", "content": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles."}]], "function": [{"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}]}, "model_result_raw": "[whole_foods.check_price(location=\"Whole Foods, Los Angeles\", items=[\"tomatoes\", \"lettuce])]", "possible_answer": [{"whole_foods.check_price": {"location": ["Los Angeles", "LA"], "items": [["tomatoes", "lettuce"]]}}]}
{"id": 374, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12 pack of bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "[walmart.purchase(loc=\"San Jose\", product_list=[\"apples\", \"rice\", \"12 pack of bottled water\"], pack_size=[1, 1, 12])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12 pack of bottled water"], "pack_size": [1, 1, 12]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": 375, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'grocery_info.nutritional_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "Check the amount of protein, calories and carbs in an avocado from Walmart."}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "[nutritional_info(store=\"Walmart\", food=\"avocado\", information=[\"Protein\", \"Calories\", \"Carbohydrates\"])]", "model_result_decoded": [{"nutritional_info": {"store": "Walmart", "food": "avocado", "information": ["Protein", "Calories", "Carbohydrates"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": 376, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'egg']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "[walmart.check_price(items=[\"pumpkin\", \"egg\"], quantities=[3, 2], store_location=\"Walmart\")]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkin", "egg"], "quantities": [3, 2], "store_location": "Walmart"}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": 380, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'get_current_time' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_379", "question": [[{"role": "user", "content": "What's the current time in Sydney, Australia?"}]], "function": [{"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time. Default "}}, "required": ["location", "country"]}}]}, "model_result_raw": "[func_name(location=\"Sydney\", country=\"Australia\")]", "model_result_decoded": [{"func_name": {"location": "Sydney", "country": "Australia"}}], "possible_answer": [{"get_current_time": {"location": ["Sydney"], "country": ["Australia", "Australia/Sydney"], "timezone": [""]}}]}
{"id": 383, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": [[{"role": "user", "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "[book_hotel(hotel_name=\"Hilton Hotel\", location=\"Chicago\", room_type=\"single\", start_date=\"10th December 2022\", nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}]}
{"id": 387, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': 'luxury room'. Expected one of ['luxury', 'Luxury']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_386", "question": [[{"role": "user", "content": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}]}, "model_result_raw": "[book_hotel(hotel_name=\"Hotel Paradise\", location=\"Las Vegas\", room_type=\"luxury room\", start_date=\"05-12-2022\", stay_duration=3)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hotel Paradise", "location": "Las Vegas", "room_type": "luxury room", "start_date": "05-12-2022", "stay_duration": 3}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}]}
{"id": 388, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_date': '2022-06-03'. Expected one of ['2022-06-04', '06/04/2022', 'Jun.4,2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "[hotel_booking(hotel_name=\"Plaza Hotel\", location=\"New York, NY\", start_date=\"2022-06-01\", end_date=\"2022-06-03\", rooms=3)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-03", "rooms": 3}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}
{"id": 394, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'Japanese Yen'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_393", "question": [[{"role": "user", "content": "How much will 20000 Japanese Yen be in United States Dollar?"}]], "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "convert_currency(base_currency=\"Japanese Yen\", target_currency=\"United States Dollar\", amount=20000)", "model_result_decoded": [{"convert_currency": {"base_currency": "Japanese Yen", "target_currency": "United States Dollar", "amount": 20000}}], "possible_answer": [{"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}]}
{"id": 395, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_location': 'Mus\u00e9e du Louvre'. Expected one of ['Louvre Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_394", "question": [[{"role": "user", "content": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum"}]], "function": [{"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[maps.get_distance_duration(start_location=\"Eiffel Tower\", end_location=\"Mus\u00e9e du Louvre\")]", "model_result_decoded": [{"maps.get_distance_duration": {"start_location": "Eiffel Tower", "end_location": "Mus\u00e9e du Louvre"}}], "possible_answer": [{"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}]}
{"id": 396, "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Central Park, New York'. Expected one of ['Central Park, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_395", "question": [[{"role": "user", "content": "Find the nearest parking lot within 2 miles of Central Park in New York."}]], "function": [{"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}]}, "model_result_raw": "[parking_lot.find_nearest(location=\"Central Park, New York\", radius=2)]", "model_result_decoded": [{"parking_lot.find_nearest": {"location": "Central Park, New York", "radius": 2}}], "possible_answer": [{"parking_lot.find_nearest": {"location": ["Central Park, NY"], "radius": [2], "type": ["public", ""]}}]}