{"accuracy": 0.6325, "correct_count": 253, "total_count": 400}
{"id": 3, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'math.hypot' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_2", "question": [[{"role": "user", "content": "Calculate the hypotenuse of a right triangle given the lengths of the other two sides as 4 and 5."}]], "function": [{"name": "math.hypot", "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.", "parameters": {"type": "dict", "properties": {"x": {"type": "integer", "description": "The x-coordinate value."}, "y": {"type": "integer", "description": "The y-coordinate value."}, "z": {"type": "integer", "description": "Optional. The z-coordinate value. Default is 0."}}, "required": ["x", "y"]}}]}, "model_result_raw": "[float.hypot(x=3, y=4)]", "model_result_decoded": [{"float.hypot": {"x": 3, "y": 4}}], "possible_answer": [{"math.hypot": {"x": [4], "y": [5], "z": ["", 0]}}]}
{"id": 6, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'root_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_5", "question": [[{"role": "user", "content": "Find all the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4."}]], "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "[solve_quadratic(a=3, b=-11, c=-4)]", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4}}], "possible_answer": [{"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["all"]}}]}
{"id": 7, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'solve_quadratic' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_6", "question": [[{"role": "user", "content": "What are the roots of the quadratic equation where a=2, b=5 and c=3 ?"}]], "function": [{"name": "solve_quadratic", "description": "Find the roots of a quadratic equation. Returns both roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x\u00b2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "[recipe_search(dish='gluten-free', time_limit='under 30 minutes')]", "model_result_decoded": [{"recipe_search": {"dish": "gluten-free", "time_limit": "under 30 minutes"}}], "possible_answer": [{"solve_quadratic": {"a": [2], "b": [5], "c": [3]}}]}
{"id": 8, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'cm'. Expected one of ['inches', 'in']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_7", "question": [[{"role": "user", "content": "What is the circumference of a circle with a radius of 4 inches?"}]], "function": [{"name": "calculate_circumference", "description": "Calculates the circumference of a circle with a given radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle in the unit given."}, "unit": {"type": "string", "description": "The unit of measurement for the radius. Default is 'cm'."}}, "required": ["radius"]}}]}, "model_result_raw": "[calculate_circumference(radius=4, unit=\"cm\")]", "model_result_decoded": [{"calculate_circumference": {"radius": 4, "unit": "cm"}}], "possible_answer": [{"calculate_circumference": {"radius": [4], "unit": ["inches", "in"]}}]}
{"id": 11, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'base'. Expected type integer, got str. Parameter value: '6'."], "error_type": "type_error:simple", "prompt": {"id": "simple_10", "question": [[{"role": "user", "content": "Calculate the area of a right-angled triangle given the lengths of its base and height as 6cm and 10cm."}]], "function": [{"name": "calculate_area", "description": "Calculate the area of a right-angled triangle given the lengths of its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The length of the base of the right-angled triangle."}, "height": {"type": "integer", "description": "The height of the right-angled triangle."}, "unit": {"type": "string", "description": "The unit of measure used. Defaults to 'cm'."}}, "required": ["base", "height"]}}]}, "model_result_raw": "[calculate_area(base=\"6\", height=\"10\", unit=\"cm\")]", "model_result_decoded": [{"calculate_area": {"base": "6", "height": "10", "unit": "cm"}}], "possible_answer": [{"calculate_area": {"base": [6], "height": [10], "unit": ["cm", ""]}}]}
{"id": 12, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'base'. Expected type integer, got str. Parameter value: '10 units'."], "error_type": "type_error:simple", "prompt": {"id": "simple_11", "question": [[{"role": "user", "content": "What is the area of a triangle with base of 10 units and height of 5 units?"}]], "function": [{"name": "calculate_triangle_area", "description": "Calculate the area of a triangle using its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The length of the base of the triangle."}, "height": {"type": "integer", "description": "The height of the triangle from the base."}}, "required": ["base", "height"]}}]}, "model_result_raw": "[calculate_triangle_area(base=\"10 units\", height=\"5 units\")]", "model_result_decoded": [{"calculate_triangle_area": {"base": "10 units", "height": "5 units"}}], "possible_answer": [{"calculate_triangle_area": {"base": [10], "height": [5]}}]}
{"id": 14, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "[calculate_area_under_curve(function=\"x**2\", interval=[1, 3], method=\"trapezoidal)]", "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": 15, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'x_value': 1.0. Expected one of ['', 0.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_14", "question": [[{"role": "user", "content": "Calculate the derivative of the function 3x^2 + 2x - 1."}]], "function": [{"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "float", "description": "The x-value at which the derivative is calculated. Optional, default to 0.00."}}, "required": ["function"]}}]}, "model_result_raw": "[calculate_derivative(function=\"3x^2 + 2x - 1\", x_value=1.0)]", "model_result_decoded": [{"calculate_derivative": {"function": "3x^2 + 2x - 1", "x_value": 1.0}}], "possible_answer": [{"calculate_derivative": {"function": ["3x**2 + 2x - 1", "lambda x: 3x**2 + 2x - 1"], "x_value": ["", 0.0]}}]}
{"id": 23, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'num1': 20. Expected one of [12]."], "error_type": "value_error:others", "prompt": {"id": "simple_22", "question": [[{"role": "user", "content": "Calculate the greatest common divisor of two given numbers, for example 12 and 15."}]], "function": [{"name": "math.gcd", "description": "Calculate the greatest common divisor (gcd) of the two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "[math.gcd(num1=20, num2=25)]", "model_result_decoded": [{"math.gcd": {"num1": 20, "num2": 25}}], "possible_answer": [{"math.gcd": {"num1": [12], "num2": [15]}}]}
{"id": 36, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operating_hours': 11. Expected one of [23]."], "error_type": "value_error:others", "prompt": {"id": "simple_35", "question": [[{"role": "user", "content": "Find an all vegan restaurant in New York that opens until at least 11 PM."}]], "function": [{"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}]}, "model_result_raw": "[vegan_restaurant.find_nearby(location=\"New York, NY\", operating_hours=11)]", "model_result_decoded": [{"vegan_restaurant.find_nearby": {"location": "New York, NY", "operating_hours": 11}}], "possible_answer": [{"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}]}
{"id": 41, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'permeability': 1.25663706143595. Expected one of ['', 125700000000.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_40", "question": [[{"role": "user", "content": "Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters"}]], "function": [{"name": "calculate_magnetic_field", "description": "Calculate the magnetic field produced at the center of a circular loop carrying current.", "parameters": {"type": "dict", "properties": {"current": {"type": "integer", "description": "The current through the circular loop in Amperes."}, "radius": {"type": "integer", "description": "The radius of the circular loop in meters."}, "permeability": {"type": "float", "description": "The magnetic permeability. Default is 12.57e10 (Vacuum Permeability)."}}, "required": ["current", "radius"]}}]}, "model_result_raw": "[calculate_magnetic_field(current=5, radius=4, permeability=1.25663706143595)", "model_result_decoded": [{"calculate_magnetic_field": {"current": 5, "radius": 4, "permeability": 1.25663706143595}}], "possible_answer": [{"calculate_magnetic_field": {"current": [5], "radius": [4], "permeability": ["", 125700000000.0]}}]}
{"id": 43, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'capacitance': 0.1. Expected one of [0.0001]."], "error_type": "value_error:others", "prompt": {"id": "simple_42", "question": [[{"role": "user", "content": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH."}]], "function": [{"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}]}, "model_result_raw": "[calculate_resonant_frequency(capacitance=0.1, inductance=0.05, round_off=2)]", "model_result_decoded": [{"calculate_resonant_frequency": {"capacitance": 0.1, "inductance": 0.05, "round_off": 2}}], "possible_answer": [{"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}]}
{"id": 44, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'permeability': 1.2566. Expected one of ['', 1.257e-06]."], "error_type": "value_error:others", "prompt": {"id": "simple_43", "question": [[{"role": "user", "content": "Calculate the magnetic field strength 10 meters away from a long wire carrying a current of 20 Amperes."}]], "function": [{"name": "calculate_magnetic_field_strength", "description": "Calculate the magnetic field strength at a point a certain distance away from a long wire carrying a current.", "parameters": {"type": "dict", "properties": {"current": {"type": "integer", "description": "The current flowing through the wire in Amperes."}, "distance": {"type": "integer", "description": "The perpendicular distance from the wire to the point where the magnetic field is being calculated."}, "permeability": {"type": "float", "description": "The permeability of the medium. Default is 12.57e-7 (Vacuum Permeability)."}}, "required": ["current", "distance"]}}]}, "model_result_raw": "[calculate_magnetic_field_strength(current=20, distance=10, permeability=1.2566)]", "model_result_decoded": [{"calculate_magnetic_field_strength": {"current": 20, "distance": 10, "permeability": 1.2566}}], "possible_answer": [{"calculate_magnetic_field_strength": {"current": [20], "distance": [10], "permeability": ["", 1.257e-06]}}]}
{"id": 62, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'height': 68. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"id": "simple_61", "question": [[{"role": "user", "content": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes."}]], "function": [{"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}]}, "model_result_raw": "[diabetes_prediction(weight=150, height=68, activity_level=\"lightly active\")]", "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 68, "activity_level": "lightly active"}}], "possible_answer": [{"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}]}
{"id": 72, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'preferences': ['G', 'C', 'G', 'C', 'G', 'C', 'G', 'C', 'G', 'C']. Expected one of [['G', 'C'], ['C', 'G']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_71", "question": [[{"role": "user", "content": "Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine)."}]], "function": [{"name": "generate_DNA_sequence", "description": "Generate a random DNA sequence with a specific length and nucleotide preference.", "parameters": {"type": "dict", "properties": {"length": {"type": "integer", "description": "The length of the DNA sequence to be generated."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["A", "T", "C", "G"]}, "description": "Preferred nucleotides to include more frequently in the DNA sequence."}}, "required": ["length", "preferences"]}}]}, "model_result_raw": "[generate_DNA_sequence(length=100, preferences=['G', 'C', 'G', 'C', 'G', 'C', 'G', 'C', 'G', 'C'])]", "model_result_decoded": [{"generate_DNA_sequence": {"length": 100, "preferences": ["G", "C", "G", "C", "G", "C", "G", "C", "G", "C"]}}], "possible_answer": [{"generate_DNA_sequence": {"length": [100], "preferences": [["G", "C"], ["C", "G"]]}}]}
{"id": 73, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_72", "question": [[{"role": "user", "content": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7."}]], "function": [{"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}]}, "model_result_raw": "[calculate_fitness(trait_values=[0.9, 0.6], trait_contributions=[0.4, 0.6]), calculate_fitness(trait_values=[0.9, 0.6], trait_contributions=[0.4, 0.6])]", "model_result_decoded": [{"calculate_fitness": {"trait_values": [0.9, 0.6], "trait_contributions": [0.4, 0.6]}}, {"calculate_fitness": {"trait_values": [0.9, 0.6], "trait_contributions": [0.4, 0.6]}}], "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": 74, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'growth_rate': 0.02. Expected one of ['', 1.2]."], "error_type": "value_error:others", "prompt": {"id": "simple_73", "question": [[{"role": "user", "content": "What's the projected population growth in United States in the next 20 years?"}]], "function": [{"name": "population_projections", "description": "Calculates the projected population growth based on the current growth rate.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which to calculate the population projection."}, "years": {"type": "integer", "description": "Number of years for the projection."}, "growth_rate": {"type": "float", "description": "Optional parameter to specify the growth rate, in percentage. Default is 1.2."}}, "required": ["country", "years"]}}]}, "model_result_raw": "[population_projections(country=\"United States\", years=20, growth_rate=0.02)]", "model_result_decoded": [{"population_projections": {"country": "United States", "years": 20, "growth_rate": 0.02}}], "possible_answer": [{"population_projections": {"country": ["United States", "USA"], "years": [20], "growth_rate": ["", 1.2]}}]}
{"id": 78, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'location_type'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_77", "question": [[{"role": "user", "content": "Find a nearby restaurant that serves vegan food in Los Angeles."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}]}, "model_result_raw": "[restaurant.find_nearby(location=\"Los Angeles, CA\", dietary_preference=[\"Vegan\"], location_type=\"city\")]", "model_result_decoded": [{"restaurant.find_nearby": {"location": "Los Angeles, CA", "dietary_preference": ["Vegan"], "location_type": "city"}}], "possible_answer": [{"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}]}
{"id": 83, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": 84, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coord2': [34.0522, 118.2437]. Expected one of [[34.0522, -118.2437]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_83", "question": [[{"role": "user", "content": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles."}]], "function": [{"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "dict", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude).", "items": {"type": "float"}}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude).", "items": {"type": "float"}}, "unit": {"type": "string", "description": "The unit of distance. Options: 'miles', 'kilometers'."}}, "required": ["coord1", "coord2", "unit"]}}]}, "model_result_raw": "[calculate_distance(coord1=(33.4484, -112.0740), coord2=(34.0522, 118.2437), unit=\"miles\")]", "model_result_decoded": [{"calculate_distance": {"coord1": [33.4484, -112.074], "coord2": [34.0522, 118.2437], "unit": "miles"}}], "possible_answer": [{"calculate_distance": {"coord1": [[33.4484, -112.074]], "coord2": [[34.0522, -118.2437]], "unit": ["miles"]}}]}
{"id": 87, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_86", "question": [[{"role": "user", "content": "Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer."}]], "function": [{"name": "city_distance.find_shortest", "description": "Calculates the shortest distance between two cities via available public transportation.", "parameters": {"type": "dict", "properties": {"start_city": {"type": "string", "description": "The city you are starting from. The parameter is in the format of city name."}, "end_city": {"type": "string", "description": "The city you are heading to.The parameter is in the format of city name."}, "transportation": {"type": "string", "description": "Preferred mode of public transportation. Default is 'bus'."}, "allow_transfer": {"type": "boolean", "description": "Allows transfer between different transportation if true. Default is false."}}, "required": ["start_city", "end_city"]}}]}, "model_result_raw": "[city_distance.find_shortest(start_city=\"New York\", end_city=\"Los Angeles\", transportation=\"train\", allow_transfer=True), city_distance.find_shortest(start_city=\"New York\", end_city=\"Los Angeles\", transportation=\"bus\", allow_transfer=False)]", "model_result_decoded": [{"city_distance.find_shortest": {"start_city": "New York", "end_city": "Los Angeles", "transportation": "train", "allow_transfer": true}}, {"city_distance.find_shortest": {"start_city": "New York", "end_city": "Los Angeles", "transportation": "bus", "allow_transfer": false}}], "possible_answer": [{"city_distance.find_shortest": {"start_city": ["New York"], "end_city": ["Los Angeles"], "transportation": ["train"], "allow_transfer": [true]}}]}
{"id": 88, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order=\"ascending\")]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": 90, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'fetch_limit'. Expected type integer, got NoneType. Parameter value: None."], "error_type": "type_error:simple", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "[db_fetch_records(database_name=\"StudentDB\", table_name=\"Students\", conditions={\"department\": \"Science\", \"school\": \"Bluebird High School\"}, fetch_limit=None)]", "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "Students", "conditions": {"department": "Science", "school": "Bluebird High School"}, "fetch_limit": null}}], "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": 91, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'data_field': ['Personal Info', 'Job History', 'Attendance']. Expected one of [['Personal Info', 'Job History']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_90", "question": [[{"role": "user", "content": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'"}]], "function": [{"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, "required": ["company_name", "employee_id"]}}]}, "model_result_raw": "[employee.fetch_data(company_name=\"ABC Ltd.\", employee_id=345, data_field=['Personal Info', 'Job History', 'Attendance'])]", "model_result_decoded": [{"employee.fetch_data": {"company_name": "ABC Ltd.", "employee_id": 345, "data_field": ["Personal Info", "Job History", "Attendance"]}}], "possible_answer": [{"employee.fetch_data": {"company_name": ["ABC Ltd."], "employee_id": [345], "data_field": [["Personal Info", "Job History"]]}}]}
{"id": 94, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Los Angeles'. Expected one of ['LA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_93", "question": [[{"role": "user", "content": "Fetch me the list of IMAX movie releases in theaters near LA for the next week."}]], "function": [{"name": "get_theater_movie_releases", "description": "Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the theaters."}, "timeframe": {"type": "integer", "description": "The number of days for which releases are required from current date."}, "format": {"type": "string", "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'"}}, "required": ["location", "timeframe"]}}]}, "model_result_raw": "[get_theater_movie_releases(location=\"Los Angeles\", timeframe=7, format=\"IMAX\")]", "model_result_decoded": [{"get_theater_movie_releases": {"location": "Los Angeles", "timeframe": 7, "format": "IMAX"}}], "possible_answer": [{"get_theater_movie_releases": {"location": ["LA"], "timeframe": [7], "format": ["IMAX"]}}]}
{"id": 97, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operation': 'is'. Expected one of ['=']."], "error_type": "value_error:dict_value", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "[database.query(table=\"user\", conditions=[{\"field\": \"age\", \"operation\": \">\", \"value\": \"25\"}, {\"field\": \"job\", \"operation\": \"is\", \"value\": \"engineer\"}])]", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "job", "operation": "is", "value": "engineer"}]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": 99, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 15. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": [[{"role": "user", "content": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?"}]], "function": [{"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}]}, "model_result_raw": "[calculate_clock_angle(hours=15, minutes=30, round_to=2)]", "model_result_decoded": [{"calculate_clock_angle": {"hours": 15, "minutes": 30, "round_to": 2}}], "possible_answer": [{"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}]}
{"id": 100, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. name 'np' is not defined"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_99", "question": [[{"role": "user", "content": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz."}]], "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}]}, "model_result_raw": "[plot_sine_wave(start_range=0, end_range=2 * np.pi, frequency=5)]", "possible_answer": [{"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}]}
{"id": 101, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'distance_in_light_years': 10. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"id": "simple_100", "question": [[{"role": "user", "content": "How much time will it take for the light to reach earth from a star 4 light years away?"}]], "function": [{"name": "light_travel_time", "description": "Calculate the time taken for light to travel from a celestial body to another.", "parameters": {"type": "dict", "properties": {"distance_in_light_years": {"type": "integer", "description": "The distance between the two celestial bodies in light years."}, "speed_of_light": {"type": "integer", "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."}}, "required": ["distance_in_light_years"]}}]}, "model_result_raw": "[light_travel_time(distance_in_light_years=10, speed_of_light=299792458)]", "model_result_decoded": [{"light_travel_time": {"distance_in_light_years": 10, "speed_of_light": 299792458}}], "possible_answer": [{"light_travel_time": {"distance_in_light_years": [4], "speed_of_light": [299792458, ""]}}]}
{"id": 104, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'mathematics.calculate_area_under_curve' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "[calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": 107, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'dataset'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_106", "question": [[{"role": "user", "content": "Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100."}]], "function": [{"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "dict", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}]}, "model_result_raw": "[train_random_forest_classifier(max_depth=5, n_estimators=100)]", "model_result_decoded": [{"train_random_forest_classifier": {"max_depth": 5, "n_estimators": 100}}], "possible_answer": [{"train_random_forest_classifier": {"dataset": ["your_dataset_name"], "max_depth": [5], "n_estimators": [100]}}]}
{"id": 115, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'trials': 7. Expected one of [10]."], "error_type": "value_error:others", "prompt": {"id": "simple_114", "question": [[{"role": "user", "content": "Find the probability of getting exactly 5 heads in 10 fair coin tosses."}]], "function": [{"name": "prob_dist.binomial", "description": "Compute the probability of having 'success' outcome from binomial distribution.", "parameters": {"type": "dict", "properties": {"trials": {"type": "integer", "description": "The number of independent experiments."}, "successes": {"type": "integer", "description": "The number of success events."}, "p": {"type": "float", "description": "The probability of success on any given trial, defaults to 0.5"}}, "required": ["trials", "successes"]}}]}, "model_result_raw": "[prob_dist.binomial(trials=7, successes=3)]", "model_result_decoded": [{"prob_dist.binomial": {"trials": 7, "successes": 3}}], "possible_answer": [{"prob_dist.binomial": {"trials": [10], "successes": [5], "p": [0.5, ""]}}]}
{"id": 118, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'success_outcomes': 1. Expected one of [13]."], "error_type": "value_error:others", "prompt": {"id": "simple_117", "question": [[{"role": "user", "content": "What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio."}]], "function": [{"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "[probability_of_event(success_outcomes=1, total_outcomes=52, format_as_ratio=True)]", "model_result_decoded": [{"probability_of_event": {"success_outcomes": 1, "total_outcomes": 52, "format_as_ratio": true}}], "possible_answer": [{"probability_of_event": {"success_outcomes": [13], "total_outcomes": [52], "format_as_ratio": [true]}}]}
{"id": 123, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_122", "question": [[{"role": "user", "content": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]"}]], "function": [{"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}]}, "model_result_raw": "```python\nchi_squared_test(table=[[10, 20], [30, 40]], alpha=0.05)\n```", "possible_answer": [{"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}]}
{"id": 125, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dataset_A': [1, 2, 3]. Expected one of [[12, 24, 36]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_124", "question": [[{"role": "user", "content": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45."}]], "function": [{"name": "t_test", "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.", "parameters": {"type": "dict", "properties": {"dataset_A": {"type": "array", "items": {"type": "integer"}, "description": "Dataset A for comparison."}, "dataset_B": {"type": "array", "items": {"type": "integer"}, "description": "Dataset B for comparison."}, "alpha": {"type": "float", "description": "Significance level for the test. Default is 0.05."}}, "required": ["dataset_A", "dataset_B"]}}]}, "model_result_raw": "[t_test(dataset_A=[1, 2, 3], dataset_B=[2, 4, 6], alpha=0.05)]", "model_result_decoded": [{"t_test": {"dataset_A": [1, 2, 3], "dataset_B": [2, 4, 6], "alpha": 0.05}}], "possible_answer": [{"t_test": {"dataset_A": [[12, 24, 36]], "dataset_B": [[15, 30, 45]], "alpha": [0.05, ""]}}]}
{"id": 127, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'include_time_limit'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_126", "question": [[{"role": "user", "content": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?"}]], "function": [{"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}]}, "model_result_raw": "[linear_regression.get_r_squared(dataset_path=\"C:/data/cars.csv\", independent_variables=[\"engine_size\", \"fuel_economy\"], dependent_variable=\"car_price\", include_time_limit=True)]", "model_result_decoded": [{"linear_regression.get_r_squared": {"dataset_path": "C:/data/cars.csv", "independent_variables": ["engine_size", "fuel_economy"], "dependent_variable": "car_price", "include_time_limit": true}}], "possible_answer": [{"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}]}
{"id": 128, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'initial_investment': 0. Expected one of [2000]."], "error_type": "value_error:others", "prompt": {"id": "simple_127", "question": [[{"role": "user", "content": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000."}]], "function": [{"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "float", "description": "The discount rate to use."}, "initial_investment": {"type": "integer", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}]}, "model_result_raw": "[calculate_NPV(cash_flows=[200, 300, 400, 500], discount_rate=0.1, initial_investment=0)]", "model_result_decoded": [{"calculate_NPV": {"cash_flows": [200, 300, 400, 500], "discount_rate": 0.1, "initial_investment": 0}}], "possible_answer": [{"calculate_NPV": {"cash_flows": [[200, 300, 400, 500]], "discount_rate": [0.1], "initial_investment": [2000]}}]}
{"id": 129, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_payout': 500000000. Expected one of [50000000]."], "error_type": "value_error:others", "prompt": {"id": "simple_128", "question": [[{"role": "user", "content": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?"}]], "function": [{"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}]}, "model_result_raw": "[finance.calculate_quarterly_dividend_per_share(total_payout=500000000, outstanding_shares=100000000)]", "model_result_decoded": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": 500000000, "outstanding_shares": 100000000}}], "possible_answer": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}]}
{"id": 131, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cash_flows': [10000, 15000, 20000, 25000, 30000]. Expected one of [[-50000, 10000, 15000, 20000, 25000, 30000]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_130", "question": [[{"role": "user", "content": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?"}]], "function": [{"name": "finance_calculator.npv", "description": "Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "A list of cash flows."}, "discount_rate": {"type": "float", "description": "The annual interest rate used to discount the cash flows."}, "years": {"type": "array", "items": {"type": "integer"}, "description": "A list of years when the cash flow occurs. Default is empty array."}}, "required": ["cash_flows", "discount_rate"]}}]}, "model_result_raw": "[finance_calculator.npv(cash_flows=[10000, 15000, 20000, 25000, 30000], discount_rate=0.06, years=[0, 1, 2, 3, 4], years=[0, 1, 2, 3, 4], dish='main course')]", "model_result_decoded": [{"finance_calculator.npv": {"cash_flows": [10000, 15000, 20000, 25000, 30000], "discount_rate": 0.06, "years": [0, 1, 2, 3, 4], "dish": "main course"}}], "possible_answer": [{"finance_calculator.npv": {"cash_flows": [[-50000, 10000, 15000, 20000, 25000, 30000]], "discount_rate": [0.08], "years": ["", []]}}]}
{"id": 132, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'n': 1. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"id": "simple_131", "question": [[{"role": "user", "content": "Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years."}]], "function": [{"name": "calculate_compound_interest", "description": "Calculate compound interest for an initial principal amount.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The principal amount that the interest is applied to."}, "rate": {"type": "float", "description": "The annual interest rate. Enter as a decimal. E.g, 5% is 0.05"}, "time": {"type": "integer", "description": "The time the money is invested for in years."}, "n": {"type": "integer", "description": "The number of times that interest is compounded per time period. Default is 1."}}, "required": ["principal", "rate", "time"]}}]}, "model_result_raw": "[calculate_compound_interest(principal=10000, rate=0.05, time=10, n=1)]", "model_result_decoded": [{"calculate_compound_interest": {"principal": 10000, "rate": 0.05, "time": 10, "n": 1}}], "possible_answer": [{"calculate_compound_interest": {"principal": [10000], "rate": [0.05], "time": [10], "n": [4]}}]}
{"id": 133, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'dividends_paid' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_132", "question": [[{"role": "user", "content": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000."}]], "function": [{"name": "calculate_return_on_equity", "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.", "parameters": {"type": "dict", "properties": {"net_income": {"type": "integer", "description": "The company's net income."}, "shareholder_equity": {"type": "integer", "description": "The company's total shareholder's equity."}, "dividends_paid": {"type": "integer", "description": "The total dividends paid by the company. Optional. If not given, default to 0."}}, "required": ["net_income", "shareholder_equity"]}}]}, "model_result_raw": "[calculate_return_on_equity(net_income=2000000, shareholder_equity=10000000)]", "model_result_decoded": [{"calculate_return_on_equity": {"net_income": 2000000, "shareholder_equity": 10000000}}], "possible_answer": [{"calculate_return_on_equity": {"net_income": [2000000], "shareholder_equity": [10000000], "dividends_paid": [200000]}}]}
{"id": 137, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_rate': 0.05. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"id": "simple_136", "question": [[{"role": "user", "content": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years."}]], "function": [{"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": "[compound_interest(principal=10000, annual_rate=0.05, compounding_freq=\"monthly\", time_in_years=5)]", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 0.05, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": [{"compound_interest": {"principal": [10000], "annual_rate": [5], "compounding_freq": ["monthly"], "time_in_years": [5]}}]}
{"id": 138, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dividends': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "simple_137", "question": [[{"role": "user", "content": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years."}]], "function": [{"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}]}, "model_result_raw": "[calculate_stock_return(investment_amount=5000, annual_growth_rate=0.06, holding_period=5, dividends=True)]", "model_result_decoded": [{"calculate_stock_return": {"investment_amount": 5000, "annual_growth_rate": 0.06, "holding_period": 5, "dividends": true}}], "possible_answer": [{"calculate_stock_return": {"investment_amount": [5000], "annual_growth_rate": [0.06], "holding_period": [5], "dividends": ["", false]}}]}
{"id": 143, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'time_limit'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_142", "question": [[{"role": "user", "content": "Find the NASDAQ stock price for the company Amazon at closing March.11, 2022."}]], "function": [{"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}]}, "model_result_raw": "[get_stock_price(company_name='Amazon', date='2022-03-11', exchange='NASDAQ', time_limit=20)]", "model_result_decoded": [{"get_stock_price": {"company_name": "Amazon", "date": "2022-03-11", "exchange": "NASDAQ", "time_limit": 20}}], "possible_answer": [{"get_stock_price": {"company_name": ["Amazon", "AMZN"], "date": ["2022-03-11"], "exchange": ["NASDAQ", ""]}}]}
{"id": 144, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company': 'Apple'. Expected one of ['AAPL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_143", "question": [[{"role": "user", "content": "'Get stock price of Apple for the last 5 days in NASDAQ.'"}]], "function": [{"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}]}, "model_result_raw": "[get_stock_price(company='Apple', days=5, exchange='NASDAQ')]", "model_result_decoded": [{"get_stock_price": {"company": "Apple", "days": 5, "exchange": "NASDAQ"}}], "possible_answer": [{"get_stock_price": {"company": ["AAPL"], "days": [5], "exchange": ["NASDAQ", ""]}}]}
{"id": 152, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": [[{"role": "user", "content": "Find the highest grossing bank in the U.S for year 2020."}]], "function": [{"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}]}, "model_result_raw": "[highest_grossing_banks(country=\"U.S.\", year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S.", "year": 2020}}], "possible_answer": [{"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}]}
{"id": 153, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'time_period'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_152", "question": [[{"role": "user", "content": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years."}]], "function": [{"name": "calculate_mutual_fund_balance", "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The initial total amount invested in the fund."}, "annual_yield": {"type": "float", "description": "The annual yield rate of the fund."}, "years": {"type": "integer", "description": "The period of time for the fund to mature."}}, "required": ["investment_amount", "annual_yield", "years"]}}]}, "model_result_raw": "[calculate_mutual_fund_balance(investment_amount=50000, annual_yield=0.05, years=3, time_period=\"3 years\")]", "model_result_decoded": [{"calculate_mutual_fund_balance": {"investment_amount": 50000, "annual_yield": 0.05, "years": 3, "time_period": "3 years"}}], "possible_answer": [{"calculate_mutual_fund_balance": {"investment_amount": [50000], "annual_yield": [0.05], "years": [3]}}]}
{"id": 161, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'info_type'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_160", "question": [[{"role": "user", "content": "Who was the victim in the case docket numbered 2022/AL2562 in California?"}]], "function": [{"name": "get_case_info", "description": "Retrieve case details using a specific case docket number and court location.", "parameters": {"type": "dict", "properties": {"docket": {"type": "string", "description": "Docket number for the specific court case."}, "court": {"type": "string", "description": "Court in which the case was heard."}, "info_type": {"type": "string", "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."}}, "required": ["docket", "court", "info_type"]}}]}, "model_result_raw": "[get_case_info(docket=\"2022/AL2562\", court=\"California\")]", "model_result_decoded": [{"get_case_info": {"docket": "2022/AL2562", "court": "California"}}], "possible_answer": [{"get_case_info": {"docket": ["2022/AL2562"], "court": ["California", "CA"], "info_type": ["victim"]}}]}
{"id": 163, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'Constant' object has no attribute 'elts'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_162", "question": [[{"role": "user", "content": "Generate a customized law contract between John and Alice for rental agreement in California."}]], "function": [{"name": "generate_law_contract", "description": "Generates a customized law contract given involved parties, contract type and location.", "parameters": {"type": "dict", "properties": {"parties": {"type": "array", "items": {"type": "string"}, "description": "Parties involved in the contract."}, "contract_type": {"type": "string", "description": "Type of the contract."}, "location": {"type": "string", "description": "Location where the contract will be in effect."}}, "required": ["parties", "contract_type", "location"]}}]}, "model_result_raw": "[None]", "possible_answer": [{"generate_law_contract": {"parties": [["John", "Alice"], ["John", "Alice"]], "contract_type": ["Rental Agreement", "rental agreement"], "location": ["California", "CA"]}}]}
{"id": 164, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara County'. Expected one of ['Santa Clara']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_163", "question": [[{"role": "user", "content": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response."}]], "function": [{"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}]}, "model_result_raw": "[property_records.get(address=\"123 Main Street\", parcel_number=\"1234567890\", county=\"Santa Clara County\", include_owner=True)]", "model_result_decoded": [{"property_records.get": {"address": "123 Main Street", "parcel_number": "1234567890", "county": "Santa Clara County", "include_owner": true}}], "possible_answer": [{"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}]}
{"id": 167, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'fee'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "[lawyer.find_nearby(city=\"Chicago\", specialty=\"Divorce\", fee_per_hour=\"less_than_400\")]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": "Divorce", "fee_per_hour": "less_than_400"}}], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": 174, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. closing parenthesis ')' does not match opening parenthesis '[' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_173", "question": [[{"role": "user", "content": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York."}]], "function": [{"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}]}, "model_result_raw": "[law_case_search(topic=\"land disputes\", year_range=[2015, 2021), location=\"New York\", judicial_system=\"state\", dietary_restrictions=\"no\"])]", "possible_answer": [{"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}]}
{"id": 176, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'type'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_175", "question": [[{"role": "user", "content": "How many months of experience a Lawyer John Doe has on handling Bankruptcy cases."}]], "function": [{"name": "lawyer.get_experience", "description": "Retrieve months of experience of a Lawyer on handling certain type of law cases.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the Lawyer."}, "law_type": {"type": "string", "description": "The type of law case. eg. Bankruptcy"}}, "required": ["name", "law_type"]}}]}, "model_result_raw": "[lawyer.get_experience(name=\"John Doe\", law_type=\"Bankruptcy\", type=\"months\")]", "model_result_decoded": [{"lawyer.get_experience": {"name": "John Doe", "law_type": "Bankruptcy", "type": "months"}}], "possible_answer": [{"lawyer.get_experience": {"name": ["John Doe"], "law_type": ["Bankruptcy"]}}]}
{"id": 177, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'case_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_176", "question": [[{"role": "user", "content": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010."}]], "function": [{"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "[lawsuit_details.find(company_name='Apple Inc.', year=2010)]", "model_result_decoded": [{"lawsuit_details.find": {"company_name": "Apple Inc.", "year": 2010}}], "possible_answer": [{"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent", "IPR"]}}]}
{"id": 179, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'required'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_178", "question": [[{"role": "user", "content": "Find details about lawsuit case numbered 'LAX2019080202' in the Los Angeles court."}]], "function": [{"name": "get_lawsuit_details", "description": "Retrieve the detailed information about a lawsuit based on its case number and the court location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the case is filed."}, "additional_details": {"type": "array", "items": {"type": "string", "enum": ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"]}, "description": "Optional. Array containing additional details to be fetched. Default is all."}}, "required": ["case_number", "court_location"]}}]}, "model_result_raw": "[get_lawsuit_details(case_number=\"LAX2019080202\", court_location=\"Los Angeles\", additional_details=[\"attorneys\", \"plaintiffs\", \"defendants\", \"charges\", \"court_updates\"], required=[\"case_number\", \"court_location\"])]", "model_result_decoded": [{"get_lawsuit_details": {"case_number": "LAX2019080202", "court_location": "Los Angeles", "additional_details": ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"], "required": ["case_number", "court_location"]}}], "possible_answer": [{"get_lawsuit_details": {"case_number": ["LAX2019080202"], "court_location": ["Los Angeles"], "additional_details": ["", ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"]]}}]}
{"id": 181, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_type': 'civil'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_180", "question": [[{"role": "user", "content": "Find the lawsuits filed against the company Google in California in the year 2020."}]], "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'."}}, "required": ["company_name", "location", "year"]}}]}, "model_result_raw": "[lawsuits_search(company_name=\"Google\", location=\"California\", year=2020, case_type=\"civil\")]", "model_result_decoded": [{"lawsuits_search": {"company_name": "Google", "location": "California", "year": 2020, "case_type": "civil"}}], "possible_answer": [{"lawsuits_search": {"company_name": ["Google"], "location": ["California", "CA"], "year": [2020], "case_type": ["", "all"]}}]}
{"id": 183, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 2020. Expected one of ['', 2023]."], "error_type": "value_error:others", "prompt": {"id": "simple_182", "question": [[{"role": "user", "content": "Retrieve all the lawsuit details for case number XYZ123."}]], "function": [{"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "integer", "description": "The year in which the lawsuit case was initiated. Default is 2023 if not specified.", "optional": true, "default": 2023}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed. Default is 'all'.", "optional": true}}, "required": ["case_number"]}}]}, "model_result_raw": "[lawsuit_info(case_number=\"XYZ123\", year=2020, location=\"New York\")]", "model_result_decoded": [{"lawsuit_info": {"case_number": "XYZ123", "year": 2020, "location": "New York"}}], "possible_answer": [{"lawsuit_info": {"case_number": ["XYZ123"], "year": ["", 2023], "location": ["", "all"]}}]}
{"id": 185, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'closed_status': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"id": "simple_184", "question": [[{"role": "user", "content": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed."}]], "function": [{"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}]}, "model_result_raw": "[lawsuit.check_case(case_id=1234, closed_status=False)]", "model_result_decoded": [{"lawsuit.check_case": {"case_id": 1234, "closed_status": false}}], "possible_answer": [{"lawsuit.check_case": {"case_id": [1234], "closed_status": [true]}}]}
{"id": 186, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'detailed_weather_forecast' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_185", "question": [[{"role": "user", "content": "What will be the weather in New York in the next 72 hours including the precipitation?"}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast. Default is false."}}, "required": ["location", "duration"]}}]}, "model_result_raw": "[DetailedWeatherForecast(location=\"New York\", duration=72, include_precipitation=True)]", "model_result_decoded": [{"DetailedWeatherForecast": {"location": "New York", "duration": 72, "include_precipitation": true}}], "possible_answer": [{"detailed_weather_forecast": {"location": ["New York", "New York, USA"], "duration": [72], "include_precipitation": [true]}}]}
{"id": 194, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'plant_types': ['Annual', 'Shrub']. Expected one of [['Annual']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "Find the best local nurseries in Toronto with a good variety of annual plants."}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": "[local_nursery.find(location=\"Toronto\", plant_types=[\"Annual\", \"Shrub\"], location_type=\"city\")]", "model_result_decoded": [{"local_nursery.find": {"location": "Toronto", "plant_types": ["Annual", "Shrub"], "location_type": "city"}}], "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": 195, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'slope_type': 'hill slope'. Expected one of ['hill', 'steep', 'moderate']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_194", "question": [[{"role": "user", "content": "What are the top three plants suitable for a hill slope in terms of erosion prevention?"}]], "function": [{"name": "get_plants_for_slope", "description": "Retrieve the list of plants suitable for slope based on erosion control ability.", "parameters": {"type": "dict", "properties": {"slope_type": {"type": "string", "description": "The type of slope like steep, moderate etc."}, "num_results": {"type": "integer", "description": "The number of top results needed. Default is 5."}}, "required": ["slope_type", "num_results"]}}]}, "model_result_raw": "[get_plants_for_slope(slope_type=\"hill slope\", num_results=3)]", "model_result_decoded": [{"get_plants_for_slope": {"slope_type": "hill slope", "num_results": 3}}], "possible_answer": [{"get_plants_for_slope": {"slope_type": ["hill", "steep", "moderate"], "num_results": [3]}}]}
{"id": 197, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2022-08-16'. Expected one of ['08-16-2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "What is the air quality index in London 2022/08/16?"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": "[air_quality(location=\"London\", date=\"2022-08-16\")]", "model_result_decoded": [{"air_quality": {"location": "London", "date": "2022-08-16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": 202, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 2023. Expected one of ['', 2024]."], "error_type": "value_error:others", "prompt": {"id": "simple_201", "question": [[{"role": "user", "content": "Estimate the population of pandas in the wild in China."}]], "function": [{"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}]}, "model_result_raw": "[estimate_population(species=\"pandas\", country=\"China\", year=2023)]", "model_result_decoded": [{"estimate_population": {"species": "pandas", "country": "China", "year": 2023}}], "possible_answer": [{"estimate_population": {"species": ["panda", "pandas"], "country": ["China", "CN"], "year": ["", 2024]}}]}
{"id": 203, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'usage_duration': 6. Expected one of [3]."], "error_type": "value_error:others", "prompt": {"id": "simple_202", "question": [[{"role": "user", "content": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?"}]], "function": [{"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}]}, "model_result_raw": "[calculate_emission_savings(energy_type=\"renewable\", usage_duration=6, region=\"California\")]", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "renewable", "usage_duration": 6, "region": "California"}}], "possible_answer": [{"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}]}
{"id": 204, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'data_type'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_203", "question": [[{"role": "user", "content": "Can you find me the latest information about air quality index and pollution data for Chicago?"}]], "function": [{"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}}, "required": ["location"]}}]}, "model_result_raw": "[get_air_quality(location=\"Chicago\", detail=True, data_type=\"latest\")]", "model_result_decoded": [{"get_air_quality": {"location": "Chicago", "detail": true, "data_type": "latest"}}], "possible_answer": [{"get_air_quality": {"location": ["Chicago"], "detail": [true]}}]}
{"id": 205, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cuisine': 'Japanese'. Expected one of ['Chinese']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_204", "question": [[{"role": "user", "content": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "integer", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "[restaurant.find_nearby(location=\"Seattle, WA\", cuisine=\"Japanese\", max_distance=10, time_limit=30)]", "model_result_decoded": [{"restaurant.find_nearby": {"location": "Seattle, WA", "cuisine": "Japanese", "max_distance": 10, "time_limit": 30}}], "possible_answer": [{"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA"], "cuisine": ["Chinese"], "max_distance": [10]}}]}
{"id": 207, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. closing parenthesis ')' does not match opening parenthesis '[' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_206", "question": [[{"role": "user", "content": "Find the nearest park with a tennis court in London."}]], "function": [{"name": "parks.find_nearby", "description": "Locate nearby parks based on specific criteria like tennis court availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. London, UK"}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Tennis Court", "Picnic Area", "Playground", "Running Track"]}, "description": "Preferred amenities in park. Default is ['Running Track']"}}, "required": ["location"]}}]}, "model_result_raw": "[parks.find_nearby(location=\"London, UK\", amenities=[\"Tennis Court\")]", "possible_answer": [{"parks.find_nearby": {"location": ["London", "London, UK"], "amenities": [["Tennis Court"]]}}]}
{"id": 209, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'avoid': ['tolls', 'ferries']. Expected one of [['highways', 'tolls'], ['tolls', 'highways']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "[map_service.get_directions(start=\"New York\", end=\"Los Angeles\", avoid=[\"tolls\", \"ferries\"], diet=\"vegetarian\")]", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": ["tolls", "ferries"], "diet": "vegetarian"}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": 210, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'facilities': ['English fiction section', 'free Wi-Fi']. Expected one of [['Fiction', 'Wi-Fi'], ['Wi-Fi', 'Fiction']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "[public_library.find_nearby(location=\"Boston, MA\", facilities=[\"English fiction section\", \"free Wi-Fi\"], diet=\"English fiction\")]", "model_result_decoded": [{"public_library.find_nearby": {"location": "Boston, MA", "facilities": ["English fiction section", "free Wi-Fi"], "diet": "English fiction"}}], "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": 215, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'genre': 'rock concerts'. Expected one of ['Rock', 'rock']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_214", "question": [[{"role": "user", "content": "Search for upcoming month rock concerts in New York."}]], "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}]}, "model_result_raw": "[event_finder.find_upcoming(location=\"New York, NY\", genre=\"rock concerts\", days_ahead=30)]", "model_result_decoded": [{"event_finder.find_upcoming": {"location": "New York, NY", "genre": "rock concerts", "days_ahead": 30}}], "possible_answer": [{"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}]}
{"id": 216, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'extra_info': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "Give me a brief on movie 'Interstellar'"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "[movie_details.brief(title=\"Interstellar\", extra_info=True)]", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": true}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": 218, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'voxel_size' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_217", "question": [[{"role": "user", "content": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm."}]], "function": [{"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "dict", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "integer", "description": "Size of isotropic voxels in mm.", "default": 3}}, "required": ["data_source", "sequence_type", "smooth"]}}]}, "model_result_raw": "[fMRI.analyze(data_source=\"~/data/myfMRI.nii\", sequence_type=\"multi-band\", smooth=6)]", "model_result_decoded": [{"fMRI.analyze": {"data_source": "~/data/myfMRI.nii", "sequence_type": "multi-band", "smooth": 6}}], "possible_answer": [{"fMRI.analyze": {"data_source": ["~/data/myfMRI.nii"], "sequence_type": ["multi-band"], "smooth": [6], "voxel_size": [2]}}]}
{"id": 225, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'diet'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_224", "question": [[{"role": "user", "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}]}, "model_result_raw": "[social_media_analytics.most_followed(topic=\"psychology\", sub_topics=[\"behaviour\", \"group dynamics\"], region=\"all\", diet=\"Gluten Free\")]", "model_result_decoded": [{"social_media_analytics.most_followed": {"topic": "psychology", "sub_topics": ["behaviour", "group dynamics"], "region": "all", "diet": "Gluten Free"}}], "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}]}
{"id": 226, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'demographic': 'general'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_225", "question": [[{"role": "user", "content": "What is the percentage of population preferring digital reading over physical books?"}]], "function": [{"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "dict", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}]}, "model_result_raw": "[psych_research.get_preference(category=\"reading\", option_one=\"digital\", option_two=\"physical\", demographic=\"general\")]", "model_result_decoded": [{"psych_research.get_preference": {"category": "reading", "option_one": "digital", "option_two": "physical", "demographic": "general"}}], "possible_answer": [{"psych_research.get_preference": {"category": ["reading"], "option_one": ["digital reading", "digital"], "option_two": ["physical book", "physical", "physical books"], "demographic": ["", "all"]}}]}
{"id": 230, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'characteristics': ['creative', 'innovative', 'outgoing', 'adventurous']. Expected one of [['efficient', 'organized', 'easy going', 'compassionate']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_229", "question": [[{"role": "user", "content": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?"}]], "function": [{"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}]}, "model_result_raw": "[get_bigfive_scores(characteristics=['creative', 'innovative', 'outgoing', 'adventurous'], scale='high')]", "model_result_decoded": [{"get_bigfive_scores": {"characteristics": ["creative", "innovative", "outgoing", "adventurous"], "scale": "high"}}], "possible_answer": [{"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}]}
{"id": 232, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'event_type'. Expected type array, got str. Parameter value: 'Diplomacy'."], "error_type": "type_error:simple", "prompt": {"id": "simple_231", "question": [[{"role": "user", "content": "Provide key war events in German history from 1871 to 1945."}]], "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. Default to 'all', which all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}]}, "model_result_raw": "[history.get_key_events(country=\"Germany\", start_year=1871, end_year=1945, event_type=[\"War\"], event_type=\"Diplomacy\")]", "model_result_decoded": [{"history.get_key_events": {"country": "Germany", "start_year": 1871, "end_year": 1945, "event_type": "Diplomacy"}}], "possible_answer": [{"history.get_key_events": {"country": ["Germany", "DE"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}]}
{"id": 234, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'european_history.get_event_date' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_233", "question": [[{"role": "user", "content": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY."}]], "function": [{"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}]}, "model_result_raw": "[euromedia.treaties.get_event_date(event_name=\"Treaty of Tordesillas\", format=\"YYYY\")]", "model_result_decoded": [{"euromedia.treaties.get_event_date": {"event_name": "Treaty of Tordesillas", "format": "YYYY"}}], "possible_answer": [{"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}]}
{"id": 236, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'get_event_date' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_235", "question": [[{"role": "user", "content": "When was the signing of the Treaty of Lisbon?"}]], "function": [{"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}]}, "model_result_raw": "[signing(date='2009-03-01', location='Brussels', event_type='World Trade Conference', location_city='Brussels')]", "model_result_decoded": [{"signing": {"date": "2009-03-01", "location": "Brussels", "event_type": "World Trade Conference", "location_city": "Brussels"}}], "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": ["", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": 239, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'Civil War'. Expected one of ['American Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_238", "question": [[{"role": "user", "content": "Who was the president of the United States during the American Civil War?"}]], "function": [{"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}]}, "model_result_raw": "[us_history.get_president(event=\"Civil War\", year=\"1861-1865\")]", "model_result_decoded": [{"us_history.get_president": {"event": "Civil War", "year": "1861-1865"}}], "possible_answer": [{"us_history.get_president": {"event": ["American Civil War"], "year": [1861, 1862, 1863, 1864, 1865]}}]}
{"id": 240, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'US_president.in_year' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_239", "question": [[{"role": "user", "content": "Who was the full name of the president of the United States in 1861?"}]], "function": [{"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}]}, "model_result_raw": "[US_president(year=1861, full_name=False)]", "model_result_decoded": [{"US_president": {"year": 1861, "full_name": false}}], "possible_answer": [{"US_president.in_year": {"year": [1861], "full_name": [true, ""]}}]}
{"id": 245, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'The Principia'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": [[{"role": "user", "content": "What year was the law of universal gravitation published by Isaac Newton?"}]], "function": [{"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}]}, "model_result_raw": "[publication_year.find(author=\"Isaac Newton\", work_title=\"The Principia\", location=\"London\")]", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "The Principia", "location": "London"}}], "possible_answer": [{"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}]}
{"id": 246, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 1869. Expected one of ['', 0]."], "error_type": "value_error:others", "prompt": {"id": "simple_245", "question": [[{"role": "user", "content": "Who discovered radium?"}]], "function": [{"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}]}, "model_result_raw": "[discoverer.get(element_name=\"radium\", year=1869)]", "model_result_decoded": [{"discoverer.get": {"element_name": "radium", "year": 1869}}], "possible_answer": [{"discoverer.get": {"element_name": ["'radium'", "\"radium\"", "radium"], "year": ["", 0], "first": [true, ""]}}]}
{"id": 250, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'till_century': 1400. Expected one of [14]."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "Tell me more about Christianity and its history till the 14th century"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "[religion.history_info(religion=\"Christianity\", till_century=1400)]", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 1400}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": 253, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'century': 1600. Expected one of [16]."], "error_type": "value_error:others", "prompt": {"id": "simple_252", "question": [[{"role": "user", "content": "Find ten major historical events related to Christianity in the 16th century sort by importance."}]], "function": [{"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}]}, "model_result_raw": "[get_religion_history(religion=\"Christianity\", century=1600, sort_by=\"importance\", count=10)]", "model_result_decoded": [{"get_religion_history": {"religion": "Christianity", "century": 1600, "sort_by": "importance", "count": 10}}], "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "century": [16], "sort_by": ["importance"], "count": [10]}}]}
{"id": 255, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'religion'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_254", "question": [[{"role": "user", "content": "Retrieve the historic dates and facts related to Christianity between year 300 and 400."}]], "function": [{"name": "get_religion_history", "description": "Retrieves historic events and facts related to a specified religion for a given period.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The starting year of the period."}, "end_year": {"type": "integer", "description": "The end year of the period."}, "event_type": {"type": "string", "enum": ["all", "crusade", "schism", "reform"], "description": "Optional parameter specifying the type of event. Default is 'all'."}}, "required": ["religion", "start_year", "end_year"]}}]}, "model_result_raw": "[get_religion_history(diet=['Christianity'], start_year=300, end_year=400)]", "model_result_decoded": [{"get_religion_history": {"diet": ["Christianity"], "start_year": 300, "end_year": 400}}], "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "start_year": [300], "end_year": [400], "event_type": ["all", ""]}}]}
{"id": 260, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coverage_rate': 500. Expected one of [400]."], "error_type": "value_error:others", "prompt": {"id": "simple_259", "question": [[{"role": "user", "content": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon."}]], "function": [{"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "dict", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}]}, "model_result_raw": "[calculate_paint_needed(coverage_rate=500, length=40, height=20)]", "model_result_decoded": [{"calculate_paint_needed": {"coverage_rate": 500, "length": 40, "height": 20}}], "possible_answer": [{"calculate_paint_needed": {"coverage_rate": [400], "length": [30], "height": [12]}}]}
{"id": 265, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'detail': 'dimensions'. Expected one of ['size']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_264", "question": [[{"role": "user", "content": "Find the size of the sculpture with title 'David' by Michelangelo."}]], "function": [{"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}]}, "model_result_raw": "[sculpture.get_details(artist=\"Michelangelo\", title=\"David\", detail=\"dimensions\")]", "model_result_decoded": [{"sculpture.get_details": {"artist": "Michelangelo", "title": "David", "detail": "dimensions"}}], "possible_answer": [{"sculpture.get_details": {"artist": ["Michelangelo"], "title": ["David"], "detail": ["size"]}}]}
{"id": 268, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "[find_exhibition(location=\"New York\", art_form=\"modern sculpture\", month=\"upcoming\", user_ratings=\"high\")]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "modern sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": 272, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'floors'. Expected outer type array with inner type <class 'int'>. Parameter value: ['2', '3', '4']."], "error_type": "type_error:nested", "prompt": {"id": "simple_271", "question": [[{"role": "user", "content": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?"}]], "function": [{"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}]}, "model_result_raw": "[analyze_structure(building_id=\"B1004\", floors=[\"2\", \"3\", \"4\"], mode=\"dynamic\")]", "model_result_decoded": [{"analyze_structure": {"building_id": "B1004", "floors": ["2", "3", "4"], "mode": "dynamic"}}], "possible_answer": [{"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}]}
{"id": 274, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'museum.get_hours' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_273", "question": [[{"role": "user", "content": "Find out the open hours for the Louvre Museum in Paris."}]], "function": [{"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours. Default 'Monday'."}}, "required": ["name", "location"]}}]}, "model_result_raw": "[get_museum_hours(name=\"Louvre\", location=\"Paris\", day=\"Monday\")]", "model_result_decoded": [{"get_museum_hours": {"name": "Louvre", "location": "Paris", "day": "Monday"}}], "possible_answer": [{"museum.get_hours": {"name": ["Louvre Museum"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}]}
{"id": 275, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'museum_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_274", "question": [[{"role": "user", "content": "Find information about the opening hours of the Metropolitan Museum of Art."}]], "function": [{"name": "museum_info", "description": "Retrieve information about the opening hours of a museum based on its name.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "info_type": {"type": "string", "description": "The type of information needed about the museum.", "default": "opening_hours"}}, "required": ["museum_name"]}}]}, "model_result_raw": "[get_museum_info(museum_name=\"Metropolitan Museum of Art\", info_type=\"museum_description\")]", "model_result_decoded": [{"get_museum_info": {"museum_name": "Metropolitan Museum of Art", "info_type": "museum_description"}}], "possible_answer": [{"museum_info": {"museum_name": ["Metropolitan Museum of Art", "The Metropolitan Museum of Art", "Met Museum"], "info_type": ["opening_hours", ""]}}]}
{"id": 277, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'museum_working_hours.get' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_276", "question": [[{"role": "user", "content": "Get the working hours of Louvre Museum in Paris."}]], "function": [{"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Default is 'Monday'"}}, "required": ["museum", "location"]}}]}, "model_result_raw": "[get_working_hours(museum=\"Louvre\", location=\"Paris\", day=\"Monday\")]", "model_result_decoded": [{"get_working_hours": {"museum": "Louvre", "location": "Paris", "day": "Monday"}}], "possible_answer": [{"museum_working_hours.get": {"museum": ["Louvre Museum", "Louvre"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}]}
{"id": 278, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum': 'British Museum'. Expected one of ['The British Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "[museum_info(museum=\"British Museum\", date=\"2023-06-20\", information=[\"opening_hours\", \"ticket_price\"], date=\"2023-06-20\", information=[\"opening_hours\", \"ticket_price\"])]", "model_result_decoded": [{"museum_info": {"museum": "British Museum", "date": "2023-06-20", "information": ["opening_hours", "ticket_price"]}}], "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": 279, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'features': ['price', 'rating', 'features']. Expected one of [['price', 'rating']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "Find me the average price and ratings of piano from Yamaha."}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "[get_instrument_details(instrument=\"piano\", manufacturer=\"Yamaha\", features=[\"price\", \"rating\", \"features\"])]", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha", "features": ["price", "rating", "features"]}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": 280, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'finish': 'Rosewood Finish'. Expected one of ['Rosewood']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_279", "question": [[{"role": "user", "content": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?"}]], "function": [{"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}]}, "model_result_raw": "[instrument_price.get(brand=\"Fender\", model=\"American Professional II Stratocaster\", finish=\"Rosewood Finish\")]", "model_result_decoded": [{"instrument_price.get": {"brand": "Fender", "model": "American Professional II Stratocaster", "finish": "Rosewood Finish"}}], "possible_answer": [{"instrument_price.get": {"brand": ["Fender"], "model": ["American Professional II Stratocaster"], "finish": ["Rosewood"]}}]}
{"id": 284, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'model': 'Les Paul'. Expected one of ['Gibson Les Paul']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_283", "question": [[{"role": "user", "content": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area."}]], "function": [{"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}]}, "model_result_raw": "[guitar_price.find(model=\"Les Paul\", condition=\"Excellent\", location=\"Chicago\")]", "model_result_decoded": [{"guitar_price.find": {"model": "Les Paul", "condition": "Excellent", "location": "Chicago"}}], "possible_answer": [{"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent"], "location": ["Chicago", "Chicago, IL", "Chicago, Illinois"]}}]}
{"id": 286, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Chicago'. Expected one of ['Chicago, Illinois', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_285", "question": [[{"role": "user", "content": "Find me a Rock concert in Chicago with ticket availability under $100."}]], "function": [{"name": "find_concert", "description": "Locate a concert in a specified location within a certain budget.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you are looking for a concert. In the format City, State."}, "price": {"type": "integer", "description": "Maximum ticket price."}, "genre": {"type": "string", "description": "Music genre of the concert. Default to 'Jazz'. ", "enum": ["Rock", "Pop", "Country", "Jazz", "Classical"]}}, "required": ["location", "price"]}}]}, "model_result_raw": "[find_concert(location=\"Chicago\", price=\"<100\", genre=\"Rock\")]", "model_result_decoded": [{"find_concert": {"location": "Chicago", "price": "<100", "genre": "Rock"}}], "possible_answer": [{"find_concert": {"location": ["Chicago, Illinois", "Chicago, IL"], "price": [100], "genre": ["Rock"]}}]}
{"id": 287, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Beyonc\u00e9'. Expected one of ['Beyonce']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_286", "question": [[{"role": "user", "content": "Get concert details for the artist Beyonce performing in San Diego next month (April 2022)."}]], "function": [{"name": "concert.get_details", "description": "Fetch the details for a particular concert based on the artist and location.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist/band who's performing."}, "location": {"type": "string", "description": "City where the concert is taking place."}, "date": {"type": "string", "description": "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."}}, "required": ["artist", "location"]}}]}, "model_result_raw": "[concert.get_details(artist=\"Beyonc\u00e9\", location=\"San Diego\", date=\"10-2023\")]", "model_result_decoded": [{"concert.get_details": {"artist": "Beyonc\u00e9", "location": "San Diego", "date": "10-2023"}}], "possible_answer": [{"concert.get_details": {"artist": ["Beyonce"], "location": ["San Diego", "San Diego, California", "CA"], "date": ["04-2022", "April 2022"]}}]}
{"id": 289, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'New York'. Expected one of ['New York City', 'New York City, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_288", "question": [[{"role": "user", "content": "Get me two tickets for next Eminem concert in New York City."}]], "function": [{"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}]}, "model_result_raw": "[concert_booking.book_ticket(artist=\"Eminem\", city=\"New York\", num_tickets=2)]", "model_result_decoded": [{"concert_booking.book_ticket": {"artist": "Eminem", "city": "New York", "num_tickets": 2}}], "possible_answer": [{"concert_booking.book_ticket": {"artist": ["Eminem"], "city": ["New York City", "New York City, NY", "NYC"], "num_tickets": [2]}}]}
{"id": 291, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Holiday'. Expected one of ['The Weeknd']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_290", "question": [[{"role": "user", "content": "What's the timing and location for The Weeknd's concert happening in December?"}]], "function": [{"name": "concert.find_details", "description": "Finds details of a concert event.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist performing."}, "month": {"type": "string", "description": "Month in which the concert is happening."}, "year": {"type": "integer", "description": "Year of the concert.", "default": 2022}}, "required": ["artist", "month"]}}]}, "model_result_raw": "[concert.find_details(month=\"December\", year=2022, artist=\"Holiday\")]", "model_result_decoded": [{"concert.find_details": {"month": "December", "year": 2022, "artist": "Holiday"}}], "possible_answer": [{"concert.find_details": {"artist": ["The Weeknd"], "month": ["December"], "year": ["", 2022]}}]}
{"id": 292, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'C major'. Expected one of ['C']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_291", "question": [[{"role": "user", "content": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute."}]], "function": [{"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}]}, "model_result_raw": "[music_generator.generate_melody(key=\"C major\", start_note=\"C4\", length=16, tempo=120)]", "model_result_decoded": [{"music_generator.generate_melody": {"key": "C major", "start_note": "C4", "length": 16, "tempo": 120}}], "possible_answer": [{"music_generator.generate_melody": {"key": ["C"], "start_note": ["C4"], "length": [16], "tempo": [120, ""]}}]}
{"id": 294, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'music_composer.create_mix' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_293", "question": [[{"role": "user", "content": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes."}]], "function": [{"name": "music_composer.create_mix", "description": "Create a mix of a song based on a particular music scale and duration", "parameters": {"type": "dict", "properties": {"scale": {"type": "string", "description": "The musical scale to be used. E.g: C Major, A Minor, etc."}, "note_duration": {"type": "string", "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", "enum": ["whole", "half", "quarter", "eighth", "sixteenth"]}, "track_length": {"type": "integer", "description": "Length of the mix track in seconds."}}, "required": ["scale", "note_duration", "track_length"]}}]}, "model_result_raw": "[create_mix(scale=\"C major\", note_duration=\"quarter\", track_length=180)]", "model_result_decoded": [{"create_mix": {"scale": "C major", "note_duration": "quarter", "track_length": 180}}], "possible_answer": [{"music_composer.create_mix": {"scale": ["C Major"], "note_duration": ["quarter"], "track_length": [180]}}]}
{"id": 295, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'music_generation.create_chord_progression' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_294", "question": [[{"role": "user", "content": "Generate a major chord progression in C key with four chords."}]], "function": [{"name": "music_generation.create_chord_progression", "description": "Create a chord progression in a specific key and number of chords.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key for the chord progression."}, "chords": {"type": "integer", "description": "Number of chords in the progression."}, "progression_type": {"type": "string", "description": "The type of the chord progression. Optional parameter. Default is 'major'."}}, "required": ["key", "chords"]}}]}, "model_result_raw": "[create_chord_progression(key=\"C major\", chords=4)]", "model_result_decoded": [{"create_chord_progression": {"key": "C major", "chords": 4}}], "possible_answer": [{"music_generation.create_chord_progression": {"key": ["C"], "chords": [4], "progression_type": ["major", ""]}}]}
{"id": 302, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'C major'. Expected one of ['C']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_301", "question": [[{"role": "user", "content": "What is the third major chord in C major scale?"}]], "function": [{"name": "get_third_chord", "description": "Calculate the third major chord in a given key.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the scale."}, "type": {"type": "string", "description": "Type of the scale, either major or minor. Default is 'major'."}}, "required": ["key"]}}]}, "model_result_raw": "[get_third_chord(key=\"C major\", type=\"major\")]", "model_result_decoded": [{"get_third_chord": {"key": "C major", "type": "major"}}], "possible_answer": [{"get_third_chord": {"key": ["C"], "type": ["major", ""]}}]}
{"id": 306, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unmatched ')' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "[sports_stats.get_performance(player_name=\"Lionel Messi\", tournament=\"La Liga 2020-2021\", season=\"2020-2021\", performance_indicator=[\"Goals Scored\", \"Assists Made\"], performance_indicator=[\"Saves Made\", \"Cards Received\", \"Tackles Made\", \"Dribbles Made\"]))", "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": 308, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'teams': ['Lakers', 'Clips']. Expected one of [['Lakers', 'Clippers'], ['Clippers', 'Lakers']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_307", "question": [[{"role": "user", "content": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?"}]], "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}]}, "model_result_raw": "[game_result.get_winner(teams=['Lakers', 'Clips'], date=\"2021-01-28\")]", "model_result_decoded": [{"game_result.get_winner": {"teams": ["Lakers", "Clips"], "date": "2021-01-28"}}], "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}]}
{"id": 309, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unexpected indent (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_308", "question": [[{"role": "user", "content": "What are the next five matches for Manchester United and who are they playing against in the English Premier League?"}]], "function": [{"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}]}, "model_result_raw": "[ sports.match_schedule(team_name=\"Manchester United\", league=\"English Premier League\", num_matches=5) ]", "possible_answer": [{"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}]}
{"id": 311, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'Los Angeles Lakers'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_310", "question": [[{"role": "user", "content": "What are the career stats of basketball player LeBron James?"}]], "function": [{"name": "get_career_stats", "description": "Retrieve the career statistics of a basketball player based on the player's name.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified."}}, "required": ["player_name"]}}]}, "model_result_raw": "[get_career_stats(player_name=\"LeBron James\", team=\"Los Angeles Lakers\")]", "model_result_decoded": [{"get_career_stats": {"player_name": "LeBron James", "team": "Los Angeles Lakers"}}], "possible_answer": [{"get_career_stats": {"player_name": ["LeBron James"], "team": [""]}}]}
{"id": 312, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'Los Angeles Lakers'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_311", "question": [[{"role": "user", "content": "Find me the detailed profile of basketball player Lebron James"}]], "function": [{"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belongs to. Default to all teams if not specified."}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}]}, "model_result_raw": "[sports_db.find_athlete(name=\"LeBron James\", sport=\"Basketball\", team=\"Los Angeles Lakers\")]", "model_result_decoded": [{"sports_db.find_athlete": {"name": "LeBron James", "sport": "Basketball", "team": "Los Angeles Lakers"}}], "possible_answer": [{"sports_db.find_athlete": {"name": ["Lebron James"], "sport": ["Basketball"], "team": [""]}}]}
{"id": 313, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'team_name'. Expected type string, got NoneType. Parameter value: None."], "error_type": "type_error:simple", "prompt": {"id": "simple_312", "question": [[{"role": "user", "content": "What are the statistics of Ronaldo's matches in 2021?"}]], "function": [{"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional). Default to not use it if not specified."}}, "required": ["player_name", "year"]}}]}, "model_result_raw": "[player_statistic(player_name=\"Cristiano Ronaldo\", year=2021, team_name=None)]", "model_result_decoded": [{"player_statistic": {"player_name": "Cristiano Ronaldo", "year": 2021, "team_name": null}}], "possible_answer": [{"player_statistic": {"player_name": ["Ronaldo", "Cristiano Ronaldo"], "year": [2021], "team_name": [""]}}]}
{"id": 324, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'sports_ranking.get_top_player' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_323", "question": [[{"role": "user", "content": "Who is ranked as the top player in woman tennis?"}]], "function": [{"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "[functions.sports_ranking.get_top_player(sport=\"tennis\", gender=\"women\")]", "model_result_decoded": [{"functions.sports_ranking.get_top_player": {"sport": "tennis", "gender": "women"}}], "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": 326, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'sports.match_results' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_325", "question": [[{"role": "user", "content": "Who won the last match between Chicago Bulls and Los Angeles Lakers?"}]], "function": [{"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}]}, "model_result_raw": "[match_results(team1=\"Chicago Bulls\", team2=\"Los Angeles Lakers\", season=\"2023\")]", "model_result_decoded": [{"match_results": {"team1": "Chicago Bulls", "team2": "Los Angeles Lakers", "season": "2023"}}], "possible_answer": [{"sports.match_results": {"team1": ["Chicago Bulls"], "team2": ["Los Angeles Lakers"], "season": [""]}}]}
{"id": 329, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "[boardgame.get_info(name=\"Ticket to Ride\", parameters=['rating', 'player count']), boardgame.get_info(name=\"Ticket to Ride\", parameters=['age', 'playing time', 'mechanics'])]", "model_result_decoded": [{"boardgame.get_info": {"name": "Ticket to Ride", "parameters": ["rating", "player count"]}}, {"boardgame.get_info": {"name": "Ticket to Ride", "parameters": ["age", "playing time", "mechanics"]}}], "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": 331, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'info_required': ['average_review_rating', 'age_range', 'number_of_players', 'playing_time', 'genre']. Expected one of [['average_review_rating', 'age_range']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "What's the average review rating and the age range for the board game 'Catan'?"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "[board_game_info(game_name=\"Catan\", info_required=[\"average_review_rating\", \"age_range\", \"number_of_players\", \"playing_time\", \"genre\"], type=\"board game\")]", "model_result_decoded": [{"board_game_info": {"game_name": "Catan", "info_required": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"], "type": "board game"}}], "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": 332, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'number_of_players': 5. Expected one of ['', 10]."], "error_type": "value_error:others", "prompt": {"id": "simple_331", "question": [[{"role": "user", "content": "Find the top chess players in New York with a rating above 2300."}]], "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}]}, "model_result_raw": "[board_game.chess.get_top_players(location=\"New York\", minimum_rating=2300, number_of_players=5)]", "model_result_decoded": [{"board_game.chess.get_top_players": {"location": "New York", "minimum_rating": 2300, "number_of_players": 5}}], "possible_answer": [{"board_game.chess.get_top_players": {"location": ["New York", "New York City", "New York City, NY", "NYC"], "minimum_rating": [2300], "number_of_players": ["", 10]}}]}
{"id": 334, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'details': ['high_low_temperature', 'humidity']. Expected one of [['high_low_temperature', 'humidity', 'precipitation']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_333", "question": [[{"role": "user", "content": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days."}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}]}, "model_result_raw": "[detailed_weather_forecast(location=\"London\", days=3, details=['high_low_temperature', 'humidity'])]", "model_result_decoded": [{"detailed_weather_forecast": {"location": "London", "days": 3, "details": ["high_low_temperature", "humidity"]}}], "possible_answer": [{"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}]}
{"id": 335, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dealer_cards': ['8', '9']. Expected one of [['10', '9']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_334", "question": [[{"role": "user", "content": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1."}]], "function": [{"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}]}, "model_result_raw": "[blackjack.check_winner(player_cards=['A', '10'], dealer_cards=['8', '9'], ace_value=11)]", "model_result_decoded": [{"blackjack.check_winner": {"player_cards": ["A", "10"], "dealer_cards": ["8", "9"], "ace_value": 11}}], "possible_answer": [{"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}]}
{"id": 340, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'poker_probability.full_house' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_339", "question": [[{"role": "user", "content": "What is the probability of getting a full house in poker?"}]], "function": [{"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}]}, "model_result_raw": "[probability_poker_full_house(deck_size=52, hand_size=5)]", "model_result_decoded": [{"probability_poker_full_house": {"deck_size": 52, "hand_size": 5}}], "possible_answer": [{"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}]}
{"id": 342, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'suit': 'heart'. Expected one of ['hearts']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_341", "question": [[{"role": "user", "content": "What are the odds of drawing a heart card from a deck without joker?"}]], "function": [{"name": "deck_of_cards.odds", "description": "Compute the probability of drawing a specific suit from a given deck of cards.", "parameters": {"type": "dict", "properties": {"suit": {"type": "string", "description": "The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'."}, "deck_type": {"type": "string", "description": "Type of deck, normal deck includes joker, and without_joker deck excludes joker.", "default": "normal"}}, "required": ["suit", "deck_type"]}}]}, "model_result_raw": "[deck_of_cards.odds(suit=\"heart\", deck_type=\"normal\")]", "model_result_decoded": [{"deck_of_cards.odds": {"suit": "heart", "deck_type": "normal"}}], "possible_answer": [{"deck_of_cards.odds": {"suit": ["hearts"], "deck_type": ["without_joker", "normal"]}}]}
{"id": 344, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'platform' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_343", "question": [[{"role": "user", "content": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'."}]], "function": [{"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}]}, "model_result_raw": "[game_stats.fetch_player_statistics(game=\"Zelda\", username=\"Sam\")]", "model_result_decoded": [{"game_stats.fetch_player_statistics": {"game": "Zelda", "username": "Sam"}}], "possible_answer": [{"game_stats.fetch_player_statistics": {"game": ["Zelda"], "username": ["Sam"], "platform": ["Switch"]}}]}
{"id": 349, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: '_class'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_348", "question": [[{"role": "user", "content": "Create a new player profile for the game with name 'StarPlayer' and character class 'Mage', set the starting level to 5."}]], "function": [{"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}]}, "model_result_raw": "[create_player_profile(player_name='StarPlayer', class_='Mage', starting_level=5)]", "model_result_decoded": [{"create_player_profile": {"player_name": "StarPlayer", "class_": "Mage", "starting_level": 5}}], "possible_answer": [{"create_player_profile": {"player_name": ["StarPlayer"], "_class": ["Mage"], "starting_level": [5]}}]}
{"id": 353, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_352", "question": [[{"role": "user", "content": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot."}]], "function": [{"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}]}, "model_result_raw": "['gamespot.getAverageUserScore', {'game_name': 'The Legend of Zelda: Breath of the Wild', 'platform': 'Nintendo Switch', 'type': 'game', 'platform': 'Nintendo Switch'}]", "possible_answer": [{"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}]}
{"id": 355, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'get_vegan_recipe' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_354", "question": [[{"role": "user", "content": "Find a vegan soup recipe that takes under 30 minutes to make."}]], "function": [{"name": "get_vegan_recipe", "description": "Retrieve a vegan soup recipe based on the provided cooking time.", "parameters": {"type": "dict", "properties": {"dish_type": {"type": "string", "description": "The type of dish, e.g. soup, dessert, etc.", "enum": ["soup", "main dish", "dessert", "salad"]}, "cooking_time": {"type": "integer", "description": "The maximum cooking time for the recipe in minutes."}, "ingredient_preference": {"type": "array", "items": {"type": "string"}, "description": "Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided."}}, "required": ["dish_type", "cooking_time"]}}]}, "model_result_raw": "[create_vegan_soup(cooking_time_lt_20=True)]", "model_result_decoded": [{"create_vegan_soup": {"cooking_time_lt_20": true}}], "possible_answer": [{"get_vegan_recipe": {"dish_type": ["soup"], "cooking_time": [30], "ingredient_preference": [""]}}]}
{"id": 357, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'prep_time'. Expected type integer, got str. Parameter value: 'under 30 minutes'."], "error_type": "type_error:simple", "prompt": {"id": "simple_356", "question": [[{"role": "user", "content": "Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare."}]], "function": [{"name": "recipe_finder.find", "description": "Find a recipe based on dietary preferences, number of servings, and preparation time.", "parameters": {"type": "dict", "properties": {"servings": {"type": "integer", "description": "The number of people that the recipe should serve."}, "diet": {"type": "string", "description": "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."}, "prep_time": {"type": "integer", "description": "The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes."}}, "required": ["servings", "diet"]}}]}, "model_result_raw": "[recipe_finder.find(servings=2, diet=\"vegan\", prep_time=\"under 30 minutes\")]", "model_result_decoded": [{"recipe_finder.find": {"servings": 2, "diet": "vegan", "prep_time": "under 30 minutes"}}], "possible_answer": [{"recipe_finder.find": {"servings": [2], "diet": ["vegan"], "prep_time": [30]}}]}
{"id": 359, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time_limit': 20. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"id": "simple_358", "question": [[{"role": "user", "content": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare."}]], "function": [{"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}]}, "model_result_raw": "[recipe_search(diet=['Gluten Free'], time_limit=20, dish='dessert')]", "model_result_decoded": [{"recipe_search": {"diet": ["Gluten Free"], "time_limit": 20, "dish": "dessert"}}], "possible_answer": [{"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}]}
{"id": 360, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_359", "question": [[{"role": "user", "content": "Give me a recipe for a vegetarian pasta with cheese for 2 servings."}]], "function": [{"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}]}, "model_result_raw": "It looks like you're working with a model that requires the output to be enclosed in square brackets for validation. Given your input, here's a corrected version:\n\n1. **Input**: \"mozzarella\"\n2. **Output**: [\"mozzarella\"]\n\nThis should be formatted correctly for the model to process. If you have more input or a specific model requirement, please let me know!", "possible_answer": [{"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}]}
{"id": 363, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'review_rate': 4.5. Expected one of [4.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_362", "question": [[{"role": "user", "content": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?"}]], "function": [{"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}]}, "model_result_raw": "[get_best_sushi_places(city=\"Tokyo\", top=5, review_rate=4.5)]", "model_result_decoded": [{"get_best_sushi_places": {"city": "Tokyo", "top": 5, "review_rate": 4.5}}], "possible_answer": [{"get_best_sushi_places": {"city": ["Tokyo"], "top": [5], "review_rate": [4.0]}}]}
{"id": 365, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'type'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_364", "question": [[{"role": "user", "content": "Can I find an Italian restaurant with Gluten-free options near Brooklyn?"}]], "function": [{"name": "find_restaurant", "description": "Locate nearby restaurants based on user defined criteria", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where user wants to search for a restaurant."}, "type": {"type": "string", "description": "The type of the cuisine/restaurant."}, "diet_option": {"type": "string", "description": "Special dietary preferences."}}, "required": ["location", "type", "diet_option"]}}]}, "model_result_raw": "[find_restaurant(location=\"Brooklyn\", cuisine_type=\"Italian\", diet_option=\"gluten-free\")]", "model_result_decoded": [{"find_restaurant": {"location": "Brooklyn", "cuisine_type": "Italian", "diet_option": "gluten-free"}}], "possible_answer": [{"find_restaurant": {"location": ["Brooklyn", "Brooklyn, NY"], "type": ["Italian"], "diet_option": ["Gluten-free"]}}]}
{"id": 368, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownie'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_367", "question": [[{"role": "user", "content": "Find me a vegan recipe for brownies which prep time is under 30 minutes."}]], "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "[find_recipe(dietary_restrictions=\"vegan\", recipe_type=\"brownie\", time=29)]", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownie", "time": 29}}], "possible_answer": [{"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}]}
{"id": 371, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "[safeway.order(location=\"Palo Alto, CA\", items=['olive oil', 'rice'], quantity=[3, 5])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": 373, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product': 'banana'. Expected one of ['bananas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_372", "question": [[{"role": "user", "content": "Find the top five organic bananas brands on the basis of rating from Whole Foods store."}]], "function": [{"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}]}, "model_result_raw": "[whole_foods.find_top_brands(product=\"banana\", number=5, organic=True)]", "model_result_decoded": [{"whole_foods.find_top_brands": {"product": "banana", "number": 5, "organic": true}}], "possible_answer": [{"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}]}
{"id": 374, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. '{' was never closed (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "[{\"name\":\"walmart.purchase\",\"description\":\"Retrieve information of items from Walmart including stock availability.\",\"parameters\":{\"loc\":\"near San Jose\",\"product_list\":[\"apples\",\"rice\"],\"required\":[\"loc\",\"product_list\"]}]", "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": 376, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'walmart.check_price' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "[check_total_price(items=['pumpkin', 'egg'], quantities=[3, 2 * 12], store_location=None)]", "model_result_decoded": [{"check_total_price": {"items": ["pumpkin", "egg"], "quantities": [3, 24], "store_location": null}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": 379, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '11am'. Expected one of ['3pm']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_378", "question": [[{"role": "user", "content": "Convert time 3pm from New York time zone to London time zone."}]], "function": [{"name": "timezone.convert", "description": "Convert time from one time zone to another.", "parameters": {"type": "dict", "properties": {"time": {"type": "string", "description": "The local time you want to convert, e.g. 3pm"}, "from_timezone": {"type": "string", "description": "The time zone you want to convert from."}, "to_timezone": {"type": "string", "description": "The time zone you want to convert to."}}, "required": ["time", "from_timezone", "to_timezone"]}}]}, "model_result_raw": "[timezone.convert(time=\"11am\", from_timezone=\"America/New_York\", to_timezone=\"Europe/London\")]", "model_result_decoded": [{"timezone.convert": {"time": "11am", "from_timezone": "America/New_York", "to_timezone": "Europe/London"}}], "possible_answer": [{"timezone.convert": {"time": ["3pm"], "from_timezone": ["America/New_York", "New York", "NYC", "New York City"], "to_timezone": ["Europe/London", "London"]}}]}
{"id": 380, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'timezone': 'Australia/Sydney'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_379", "question": [[{"role": "user", "content": "What's the current time in Sydney, Australia?"}]], "function": [{"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time. Default "}}, "required": ["location", "country"]}}]}, "model_result_raw": "[get_current_time(location=\"Sydney\", country=\"Australia\", timezone=\"Australia/Sydney\")]", "model_result_decoded": [{"get_current_time": {"location": "Sydney", "country": "Australia", "timezone": "Australia/Sydney"}}], "possible_answer": [{"get_current_time": {"location": ["Sydney"], "country": ["Australia", "Australia/Sydney"], "timezone": [""]}}]}
{"id": 381, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Manhattan'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "[hotel_booking(location=\"Manhattan\", room_type=\"single\", duration=3, start_date=\"2023-03-10\")]", "model_result_decoded": [{"hotel_booking": {"location": "Manhattan", "room_type": "single", "duration": 3, "start_date": "2023-03-10"}}], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": 384, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': 'double'. Expected one of ['Single', 'single']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_383", "question": [[{"role": "user", "content": "I would like to book a single room for two nights at The Plaza hotel."}]], "function": [{"name": "book_room", "description": "Book a room in a specified hotel.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "num_nights": {"type": "integer", "description": "The number of nights to book the room for."}}, "required": ["hotel_name", "room_type", "num_nights"]}}]}, "model_result_raw": "[book_room(hotel_name=\"The Plaza\", room_type=\"double\", num_nights=2)]", "model_result_decoded": [{"book_room": {"hotel_name": "The Plaza", "room_type": "double", "num_nights": 2}}], "possible_answer": [{"book_room": {"hotel_name": ["The Plaza"], "room_type": ["Single", "single"], "num_nights": [2]}}]}
{"id": 386, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'hotel_bookings.book_room' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_385", "question": [[{"role": "user", "content": "Book a hotel room with king size bed in Los Angeles for 2 nights starting from 15th October,2023."}]], "function": [{"name": "hotel_bookings.book_room", "description": "Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where you want to book the hotel, e.g. Los Angeles, CA"}, "room_type": {"type": "string", "description": "Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc."}, "check_in_date": {"type": "string", "description": "Check-in date for the hotel. Format - DD-MM-YYYY."}, "no_of_nights": {"type": "integer", "description": "Number of nights for the stay."}, "no_of_rooms": {"type": "integer", "description": "Number of rooms to book. Default is 1.", "default": 1}}, "required": ["location", "room_type", "check_in_date", "no_of_nights"]}}]}, "model_result_raw": "[hotel_bookings(book_room, location=\"Los Angeles, CA\", room_type=\"king size\", check_in_date=\"15-10-2023\", no_of_nights=2, no_of_rooms=1)]", "model_result_decoded": [{"hotel_bookings": {"location": "Los Angeles, CA", "room_type": "king size", "check_in_date": "15-10-2023", "no_of_nights": 2, "no_of_rooms": 1}}], "possible_answer": [{"hotel_bookings.book_room": {"location": ["Los Angeles", "Los Angeles, CA", "LA"], "room_type": ["King Size", "king size"], "check_in_date": ["15-10-2023", "15th October", "2023-10-15", "10/15/2023", "Oct.15,2023"], "no_of_nights": [2], "no_of_rooms": ["", 1]}}]}
{"id": 388, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_date': '2022-06-03'. Expected one of ['2022-06-04', '06/04/2022', 'Jun.4,2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "[hotel_booking(hotel_name=\"Plaza Hotel\", location=\"New York, NY\", start_date=\"2022-06-01\", end_date=\"2022-06-03\", rooms=2)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-03", "rooms": 2}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}
{"id": 389, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'CAD'. Expected one of ['USD']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_388", "question": [[{"role": "user", "content": "How many Canadian dollars can I get for 500 US dollars?"}]], "function": [{"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "integer", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "[currency_exchange.convert(base_currency=\"CAD\", target_currency=\"USD\", amount=500)]", "model_result_decoded": [{"currency_exchange.convert": {"base_currency": "CAD", "target_currency": "USD", "amount": 500}}], "possible_answer": [{"currency_exchange.convert": {"base_currency": ["USD"], "target_currency": ["CAD"], "amount": [500]}}]}
{"id": 391, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'currency_conversion.convert' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_390", "question": [[{"role": "user", "content": "Convert 150 Euros to Canadian dollars."}]], "function": [{"name": "currency_conversion.convert", "description": "Convert a value from one currency to another.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}]}, "model_result_raw": "[convert(amount=150, from_currency=\"EUR\", to_currency=\"CAD\")]", "model_result_decoded": [{"convert": {"amount": 150, "from_currency": "EUR", "to_currency": "CAD"}}], "possible_answer": [{"currency_conversion.convert": {"amount": [150], "from_currency": ["EUR", "Euros"], "to_currency": ["CAD", "Canadian dollars"]}}]}
{"id": 392, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'British pounds'. Expected one of ['GBP']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_391", "question": [[{"role": "user", "content": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included."}]], "function": [{"name": "get_exchange_rate_with_fee", "description": "Retrieve the exchange rate between two currencies including transaction fee.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}, "fee": {"type": "float", "description": "The transaction fee in percentage. Default is 0%."}}, "required": ["base_currency", "target_currency", "fee"]}}]}, "model_result_raw": "[get_exchange_rate_with_fee(base_currency=\"British pounds\", target_currency=\"Japanese yen\", fee=0.02)]", "model_result_decoded": [{"get_exchange_rate_with_fee": {"base_currency": "British pounds", "target_currency": "Japanese yen", "fee": 0.02}}], "possible_answer": [{"get_exchange_rate_with_fee": {"base_currency": ["GBP"], "target_currency": ["JPY"], "fee": [0.02]}}]}
{"id": 394, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'Japanese Yen'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_393", "question": [[{"role": "user", "content": "How much will 20000 Japanese Yen be in United States Dollar?"}]], "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "[convert_currency(base_currency=\"Japanese Yen\", target_currency=\"United States Dollar\", amount=20000)]", "model_result_decoded": [{"convert_currency": {"base_currency": "Japanese Yen", "target_currency": "United States Dollar", "amount": 20000}}], "possible_answer": [{"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}]}
{"id": 395, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'traffic': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "simple_394", "question": [[{"role": "user", "content": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum"}]], "function": [{"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[maps.get_distance_duration(start_location=\"Eiffel Tower\", end_location=\"Louvre Museum\", traffic=True)]", "model_result_decoded": [{"maps.get_distance_duration": {"start_location": "Eiffel Tower", "end_location": "Louvre Museum", "traffic": true}}], "possible_answer": [{"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}]}
{"id": 396, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Central Park, New York'. Expected one of ['Central Park, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_395", "question": [[{"role": "user", "content": "Find the nearest parking lot within 2 miles of Central Park in New York."}]], "function": [{"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}]}, "model_result_raw": "[parking_lot.find_nearest(location=\"Central Park, New York\", radius=2, type=\"public\")]", "model_result_decoded": [{"parking_lot.find_nearest": {"location": "Central Park, New York", "radius": 2, "type": "public"}}], "possible_answer": [{"parking_lot.find_nearest": {"location": ["Central Park, NY"], "radius": [2], "type": ["public", ""]}}]}
{"id": 397, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'department': 'General Medicine'. Expected one of ['Pediatrics']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_396", "question": [[{"role": "user", "content": "Find a hospital within 5 km radius around Denver, Colorado with pediatrics department."}]], "function": [{"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital. Default is 'General Medicine'.", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}]}, "model_result_raw": "[hospital.locate(location=\"Denver, CO\", radius=5, department=\"General Medicine\")]", "model_result_decoded": [{"hospital.locate": {"location": "Denver, CO", "radius": 5, "department": "General Medicine"}}], "possible_answer": [{"hospital.locate": {"location": ["Denver, Colorado", "Denver, CO"], "radius": [5], "department": ["Pediatrics"]}}]}
{"id": 400, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'rating'. Expected type integer, got float. Parameter value: 4.0."], "error_type": "type_error:simple", "prompt": {"id": "simple_399", "question": [[{"role": "user", "content": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards."}]], "function": [{"name": "restaurant_search", "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York City, NY"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."}, "rating": {"type": "integer", "description": "Minimum average customer rating out of 5"}, "accepts_credit_cards": {"type": "boolean", "description": "If the restaurant should accept credit cards."}}, "required": ["location", "cuisine", "rating", "accepts_credit_cards"]}}]}, "model_result_raw": "[restaurant_search(location=\"New York City, NY\", cuisine=\"Italian\", rating=4.0, accepts_credit_cards=True, type=\"Italian\")]", "model_result_decoded": [{"restaurant_search": {"location": "New York City, NY", "cuisine": "Italian", "rating": 4.0, "accepts_credit_cards": true, "type": "Italian"}}], "possible_answer": [{"restaurant_search": {"location": ["New York City", "New York City, NY", "NYC"], "cuisine": ["Italian"], "rating": [4], "accepts_credit_cards": [true]}}]}