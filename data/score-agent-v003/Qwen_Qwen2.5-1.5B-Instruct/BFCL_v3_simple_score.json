{"accuracy": 0.745, "correct_count": 298, "total_count": 400}
{"id": 14, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "[calculate_area_under_curve(function=\"x**2\", interval=[1, 3]), method=\"trapezoidal\"]", "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": 15, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'x_value': 1.0. Expected one of ['', 0.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_14", "question": [[{"role": "user", "content": "Calculate the derivative of the function 3x^2 + 2x - 1."}]], "function": [{"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "float", "description": "The x-value at which the derivative is calculated. Optional, default to 0.00."}}, "required": ["function"]}}]}, "model_result_raw": "[calculate_derivative(function=\"3*x**2 + 2*x - 1\", x_value=1)]", "model_result_decoded": [{"calculate_derivative": {"function": "3*x**2 + 2*x - 1", "x_value": 1}}], "possible_answer": [{"calculate_derivative": {"function": ["3x**2 + 2x - 1", "lambda x: 3x**2 + 2x - 1"], "x_value": ["", 0.0]}}]}
{"id": 18, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_17", "question": [[{"role": "user", "content": "Find the prime factors of 450"}]], "function": [{"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false. Default is true."}}, "required": ["number", "formatted"]}}]}, "model_result_raw": "```python\nget_prime_factors(number=450, formatted=True)\n```", "possible_answer": [{"get_prime_factors": {"number": [450], "formatted": [true, ""]}}]}
{"id": 21, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'math.hcf' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_20", "question": [[{"role": "user", "content": "Find the highest common factor of 36 and 24."}]], "function": [{"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}]}, "model_result_raw": "[HCF(number1=36, number2=24)]", "model_result_decoded": [{"HCF": {"number1": 36, "number2": 24}}], "possible_answer": [{"math.hcf": {"number1": [36], "number2": [24]}}]}
{"id": 22, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'number_theory.gcd' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_21", "question": [[{"role": "user", "content": "Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48."}]], "function": [{"name": "number_theory.gcd", "description": "Compute the greatest common divisor of two given integers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "The first integer."}, "number2": {"type": "integer", "description": "The second integer."}}, "required": ["number1", "number2"]}}]}, "model_result_raw": "[gcd(number1=36, number2=48)]", "model_result_decoded": [{"gcd": {"number1": 36, "number2": 48}}], "possible_answer": [{"number_theory.gcd": {"number1": [36], "number2": [48]}}]}
{"id": 28, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'acceleration': -2. Expected one of [2]."], "error_type": "value_error:others", "prompt": {"id": "simple_27", "question": [[{"role": "user", "content": "Calculate the final velocity of a vehicle after accelerating at 2 meters/second^2 for a duration of 5 seconds, starting from a speed of 10 meters/second."}]], "function": [{"name": "final_velocity", "description": "Calculate the final velocity of an object given its initial velocity, acceleration, and time.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object in meters/second."}, "acceleration": {"type": "integer", "description": "The acceleration of the object in meters/second^2."}, "time": {"type": "integer", "description": "The time over which the acceleration is applied in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}]}, "model_result_raw": "[final_velocity(initial_velocity=10, acceleration=-2, time=5)]", "model_result_decoded": [{"final_velocity": {"initial_velocity": 10, "acceleration": -2, "time": 5}}], "possible_answer": [{"final_velocity": {"initial_velocity": [10], "acceleration": [2], "time": [5]}}]}
{"id": 33, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'initial_velocity': 20. Expected one of [0]."], "error_type": "value_error:others", "prompt": {"id": "simple_32", "question": [[{"role": "user", "content": "Calculate the final speed of an object dropped from 100 m without air resistance."}]], "function": [{"name": "calculate_final_speed", "description": "Calculate the final speed of an object dropped from a certain height without air resistance.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object."}, "height": {"type": "integer", "description": "The height from which the object is dropped."}, "gravity": {"type": "float", "description": "The gravitational acceleration. Default is 9.8 m/s^2."}}, "required": ["initial_velocity", "height"]}}]}, "model_result_raw": "[calculate_final_speed(initial_velocity=20, height=100)]", "model_result_decoded": [{"calculate_final_speed": {"initial_velocity": 20, "height": 100}}], "possible_answer": [{"calculate_final_speed": {"initial_velocity": [0], "height": [100], "gravity": [9.8, ""]}}]}
{"id": 36, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operating_hours': 11. Expected one of [23]."], "error_type": "value_error:others", "prompt": {"id": "simple_35", "question": [[{"role": "user", "content": "Find an all vegan restaurant in New York that opens until at least 11 PM."}]], "function": [{"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}]}, "model_result_raw": "[vegan_restaurant.find_nearby(location=\"New York, NY\", operating_hours=11)]", "model_result_decoded": [{"vegan_restaurant.find_nearby": {"location": "New York, NY", "operating_hours": 11}}], "possible_answer": [{"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}]}
{"id": 37, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_36", "question": [[{"role": "user", "content": "Find the shortest driving distance between New York City and Washington D.C."}]], "function": [{"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}]}, "model_result_raw": "[\"get_shortest_flying_distance\", \"origin\": \"New York City\", \"destination\": \"Washington D.C.\", \"unit\": \"km\"]", "possible_answer": [{"get_shortest_driving_distance": {"origin": ["New York City"], "destination": ["Washington D.C."], "unit": ["km", ""]}}]}
{"id": 43, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'capacitance': 1e-05. Expected one of [0.0001]."], "error_type": "value_error:others", "prompt": {"id": "simple_42", "question": [[{"role": "user", "content": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH."}]], "function": [{"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}]}, "model_result_raw": "[calculate_resonant_frequency(capacitance=1e-05, inductance=5e-04)]", "model_result_decoded": [{"calculate_resonant_frequency": {"capacitance": 1e-05, "inductance": 0.0005}}], "possible_answer": [{"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}]}
{"id": 44, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_43", "question": [[{"role": "user", "content": "Calculate the magnetic field strength 10 meters away from a long wire carrying a current of 20 Amperes."}]], "function": [{"name": "calculate_magnetic_field_strength", "description": "Calculate the magnetic field strength at a point a certain distance away from a long wire carrying a current.", "parameters": {"type": "dict", "properties": {"current": {"type": "integer", "description": "The current flowing through the wire in Amperes."}, "distance": {"type": "integer", "description": "The perpendicular distance from the wire to the point where the magnetic field is being calculated."}, "permeability": {"type": "float", "description": "The permeability of the medium. Default is 12.57e-7 (Vacuum Permeability)."}}, "required": ["current", "distance"]}}]}, "model_result_raw": "```python\ncalculate_magnetic_field_strength(current=20, distance=10, permeability=12.57e-7)\n```", "possible_answer": [{"calculate_magnetic_field_strength": {"current": [20], "distance": [10], "permeability": ["", 1.257e-06]}}]}
{"id": 51, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'substance': 'water'. Expected one of ['ice']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_50", "question": [[{"role": "user", "content": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?"}]], "function": [{"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}]}, "model_result_raw": "[entropy_change.calculate(substance=\"water\", mass=1, initial_temperature=0, final_temperature=100, pressure=1)]", "model_result_decoded": [{"entropy_change.calculate": {"substance": "water", "mass": 1, "initial_temperature": 0, "final_temperature": 100, "pressure": 1}}], "possible_answer": [{"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}]}
{"id": 54, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_53", "question": [[{"role": "user", "content": "Retrieve the sequence of DNA molecule with id `DNA123`."}]], "function": [{"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "dict", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}]}, "model_result_raw": "```json\n[{\"name\": \"fetch_DNA_sequence\", \"parameters\": {\"DNA_id\": \"DNA123\", \"upstream\": 5}}]\n```", "possible_answer": [{"fetch_DNA_sequence": {"DNA_id": ["DNA123"], "format": ["", "fasta"], "upstream": ["", 0]}}]}
{"id": 55, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gene': 'BRCA2'. Expected one of ['BRCA1']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_54", "question": [[{"role": "user", "content": "Identify the protein sequence of a given human gene 'BRCA1'."}]], "function": [{"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "dict", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}]}, "model_result_raw": "[get_protein_sequence(gene=\"BRCA2\", species=\"Homo sapiens\")]", "model_result_decoded": [{"get_protein_sequence": {"gene": "BRCA2", "species": "Homo sapiens"}}], "possible_answer": [{"get_protein_sequence": {"gene": ["BRCA1"], "species": ["Homo sapiens", ""]}}]}
{"id": 64, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_63", "question": [[{"role": "user", "content": "Find out how genetically similar a human and a chimp are in percentage."}]], "function": [{"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "dict", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}]}, "model_result_raw": "[genetics.calculate_similarity(species1=\"human\", species2=\"chimpanzee\"), genetics.calculate_similarity(species1=\"human\", species2=\"chimpanzee\", format=\"percentage\")]", "model_result_decoded": [{"genetics.calculate_similarity": {"species1": "human", "species2": "chimpanzee"}}, {"genetics.calculate_similarity": {"species1": "human", "species2": "chimpanzee", "format": "percentage"}}], "possible_answer": [{"genetics.calculate_similarity": {"species1": ["Human", "human"], "species2": ["Chimp", "chimp", "Chimpanzee", "chimpanzee"], "format": ["percentage", ""]}}]}
{"id": 65, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'allele_frequency': 0.6. Expected one of [0.3]."], "error_type": "value_error:others", "prompt": {"id": "simple_64", "question": [[{"role": "user", "content": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?"}]], "function": [{"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "dict", "properties": {"allele_frequency": {"type": "float", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed.", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}]}, "model_result_raw": "[calculate_genotype_frequency(allele_frequency=0.6, genotype=\"AA\")]", "model_result_decoded": [{"calculate_genotype_frequency": {"allele_frequency": 0.6, "genotype": "AA"}}], "possible_answer": [{"calculate_genotype_frequency": {"allele_frequency": [0.3], "genotype": ["AA"]}}]}
{"id": 66, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'population': 2130000000. Expected one of [213000000]."], "error_type": "value_error:others", "prompt": {"id": "simple_65", "question": [[{"role": "user", "content": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers."}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "integer", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}]}, "model_result_raw": "[calculate_density(country=\"Brazil\", year=\"2022\", population=2130000000, land_area=85000000)]", "model_result_decoded": [{"calculate_density": {"country": "Brazil", "year": "2022", "population": 2130000000, "land_area": 85000000}}], "possible_answer": [{"calculate_density": {"country": ["Brazil"], "year": ["2022"], "population": [213000000], "land_area": [8500000]}}]}
{"id": 73, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'trait_values': [0.9, 0.6]. Expected one of [[0.8, 0.7]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_72", "question": [[{"role": "user", "content": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7."}]], "function": [{"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}]}, "model_result_raw": "[calculate_fitness(trait_values=[0.9, 0.6], trait_contributions=[0.3, 0.7])]", "model_result_decoded": [{"calculate_fitness": {"trait_values": [0.9, 0.6], "trait_contributions": [0.3, 0.7]}}], "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": 77, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'prediction.evolution' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_76", "question": [[{"role": "user", "content": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model"}]], "function": [{"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}]}, "model_result_raw": "[Prediction.Evolution(species=\"Homo Sapiens\", years=50, model=\"Darwin\")]", "model_result_decoded": [{"Prediction.Evolution": {"species": "Homo Sapiens", "years": 50, "model": "Darwin"}}], "possible_answer": [{"prediction.evolution": {"species": ["Homo Sapiens", "homo sapiens", "Homo sapiens"], "years": [50], "model": ["Darwin"]}}]}
{"id": 78, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Los Angeles'. Expected one of ['Los Angeles, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_77", "question": [[{"role": "user", "content": "Find a nearby restaurant that serves vegan food in Los Angeles."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}]}, "model_result_raw": "[restaurant.find_nearby(location=\"Los Angeles\", dietary_preference=[\"Vegan\"])]", "model_result_decoded": [{"restaurant.find_nearby": {"location": "Los Angeles", "dietary_preference": ["Vegan"]}}], "possible_answer": [{"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}]}
{"id": 83, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": 84, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coord1': [33.4484, 112.074]. Expected one of [[33.4484, -112.074]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_83", "question": [[{"role": "user", "content": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles."}]], "function": [{"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "dict", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude).", "items": {"type": "float"}}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude).", "items": {"type": "float"}}, "unit": {"type": "string", "description": "The unit of distance. Options: 'miles', 'kilometers'."}}, "required": ["coord1", "coord2", "unit"]}}]}, "model_result_raw": "[calculate_distance(coord1=(33.4484, 112.0740), coord2=(34.0522, 118.2437), unit=\"miles\")]", "model_result_decoded": [{"calculate_distance": {"coord1": [33.4484, 112.074], "coord2": [34.0522, 118.2437], "unit": "miles"}}], "possible_answer": [{"calculate_distance": {"coord1": [[33.4484, -112.074]], "coord2": [[34.0522, -118.2437]], "unit": ["miles"]}}]}
{"id": 88, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order=\"ascending\")]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": 92, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'opens on Saturdays'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "Get the highest rated sushi restaurant in Boston, that opens on Sundays."}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "[get_restaurant(cuisine=\"sushi\", location=\"Boston\", condition=\"opens on Saturdays\")]", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "opens on Saturdays"}}], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": 97, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. positional argument follows keyword argument (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "[database.query(table=\"user\", conditions={\"field\": \"age\", \"operation\": \">\", \"value\": \"25\"}, {\"field\": \"job\", \"operation\": \"=\", \"value\": \"engineer\"})]", "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": 100, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. name 'math' is not defined"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_99", "question": [[{"role": "user", "content": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz."}]], "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}]}, "model_result_raw": "[plot_sine_wave(start_range=0, end_range=2 * math.pi, frequency=5)]", "possible_answer": [{"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}]}
{"id": 104, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'mathematics.calculate_area_under_curve' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "[calculate_area_under_curve(polynomial=[4, 3, -2], limits=[-1, 2])]", "model_result_decoded": [{"calculate_area_under_curve": {"polynomial": [4, 3, -2], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": 129, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_payout': 500000. Expected one of [50000000]."], "error_type": "value_error:others", "prompt": {"id": "simple_128", "question": [[{"role": "user", "content": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?"}]], "function": [{"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}]}, "model_result_raw": "[finance.calculate_quarterly_dividend_per_share(total_payout=500000, outstanding_shares=1000000)]", "model_result_decoded": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": 500000, "outstanding_shares": 1000000}}], "possible_answer": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}]}
{"id": 132, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'principal': 100000. Expected one of [10000]."], "error_type": "value_error:others", "prompt": {"id": "simple_131", "question": [[{"role": "user", "content": "Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years."}]], "function": [{"name": "calculate_compound_interest", "description": "Calculate compound interest for an initial principal amount.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The principal amount that the interest is applied to."}, "rate": {"type": "float", "description": "The annual interest rate. Enter as a decimal. E.g, 5% is 0.05"}, "time": {"type": "integer", "description": "The time the money is invested for in years."}, "n": {"type": "integer", "description": "The number of times that interest is compounded per time period. Default is 1."}}, "required": ["principal", "rate", "time"]}}]}, "model_result_raw": "[calculate_compound_interest(principal=100000, rate=0.05, time=10, n=4)]", "model_result_decoded": [{"calculate_compound_interest": {"principal": 100000, "rate": 0.05, "time": 10, "n": 4}}], "possible_answer": [{"calculate_compound_interest": {"principal": [10000], "rate": [0.05], "time": [10], "n": [4]}}]}
{"id": 138, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_growth_rate': 6.0. Expected one of [0.06]."], "error_type": "value_error:others", "prompt": {"id": "simple_137", "question": [[{"role": "user", "content": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years."}]], "function": [{"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}]}, "model_result_raw": "[calculate_stock_return(investment_amount=5000, annual_growth_rate=6.0, holding_period=5, dividends=False)]", "model_result_decoded": [{"calculate_stock_return": {"investment_amount": 5000, "annual_growth_rate": 6.0, "holding_period": 5, "dividends": false}}], "possible_answer": [{"calculate_stock_return": {"investment_amount": [5000], "annual_growth_rate": [0.06], "holding_period": [5], "dividends": ["", false]}}]}
{"id": 143, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_142", "question": [[{"role": "user", "content": "Find the NASDAQ stock price for the company Amazon at closing March.11, 2022."}]], "function": [{"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}]}, "model_result_raw": "```python\n[get_stock_price(company_name=\"Amazon\", date=\"2022-03-11\", exchange=\"NASDAQ\")]\n```", "possible_answer": [{"get_stock_price": {"company_name": ["Amazon", "AMZN"], "date": ["2022-03-11"], "exchange": ["NASDAQ", ""]}}]}
{"id": 144, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company': 'Apple'. Expected one of ['AAPL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_143", "question": [[{"role": "user", "content": "'Get stock price of Apple for the last 5 days in NASDAQ.'"}]], "function": [{"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}]}, "model_result_raw": "['get_stock_price(company=\"Apple\", days=5, exchange=\"NASDAQ\")]", "model_result_decoded": [{"get_stock_price": {"company": "Apple", "days": 5, "exchange": "NASDAQ"}}], "possible_answer": [{"get_stock_price": {"company": ["AAPL"], "days": [5], "exchange": ["NASDAQ", ""]}}]}
{"id": 158, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_157", "question": [[{"role": "user", "content": "Find out if an individual John Doe with a birthday 01-01-1980 has any prior felony convictions in California."}]], "function": [{"name": "criminal_history.check_felonies", "description": "This function checks if an individual has any prior felony convictions based on their full name and birth date.", "parameters": {"type": "dict", "properties": {"full_name": {"type": "string", "description": "The full name of the individual."}, "birth_date": {"type": "string", "description": "The birth date of the individual. Must be in MM-DD-YYYY format."}, "state": {"type": "string", "description": "The state to search the criminal record in. Default to 'None', which the function will search across all states."}}, "required": ["full_name", "birth_date"]}}]}, "model_result_raw": "```python\n[criminal_history.check_felonies(full_name=\"John Doe\", birth_date=\"01-01-1980\", state=\"California\")]\n```", "possible_answer": [{"criminal_history.check_felonies": {"full_name": ["John Doe"], "birth_date": ["01-01-1980"], "state": ["California", "CA"]}}]}
{"id": 159, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_158", "question": [[{"role": "user", "content": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015."}]], "function": [{"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}]}, "model_result_raw": "[get_criminal_records(name=\"Mr. X\", location=\"New York\", from_year=2012, to_year=2015)]", "model_result_decoded": [{"get_criminal_records": {"name": "Mr. X", "location": "New York", "from_year": 2012, "to_year": 2015}}], "possible_answer": [{"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}]}
{"id": 160, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'act_name': 'Criminal Law Amendment Act of 2013'. Expected one of ['Criminal Law Amendment Act', 'Criminal Law Amendment']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_159", "question": [[{"role": "user", "content": "Give me the details of Criminal Law Amendment Act of 2013."}]], "function": [{"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "dict", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}]}, "model_result_raw": "[get_act_details(act_name=\"Criminal Law Amendment Act of 2013\", amendment_year=2013)]", "model_result_decoded": [{"get_act_details": {"act_name": "Criminal Law Amendment Act of 2013", "amendment_year": 2013}}], "possible_answer": [{"get_act_details": {"act_name": ["Criminal Law Amendment Act", "Criminal Law Amendment"], "amendment_year": [2013]}}]}
{"id": 163, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'contract_type': 'rental'. Expected one of ['Rental Agreement', 'rental agreement']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_162", "question": [[{"role": "user", "content": "Generate a customized law contract between John and Alice for rental agreement in California."}]], "function": [{"name": "generate_law_contract", "description": "Generates a customized law contract given involved parties, contract type and location.", "parameters": {"type": "dict", "properties": {"parties": {"type": "array", "items": {"type": "string"}, "description": "Parties involved in the contract."}, "contract_type": {"type": "string", "description": "Type of the contract."}, "location": {"type": "string", "description": "Location where the contract will be in effect."}}, "required": ["parties", "contract_type", "location"]}}]}, "model_result_raw": "[generate_law_contract(parties=['John', 'Alice'], contract_type='rental', location='California')]", "model_result_decoded": [{"generate_law_contract": {"parties": ["John", "Alice"], "contract_type": "rental", "location": "California"}}], "possible_answer": [{"generate_law_contract": {"parties": [["John", "Alice"], ["John", "Alice"]], "contract_type": ["Rental Agreement", "rental agreement"], "location": ["California", "CA"]}}]}
{"id": 164, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara County'. Expected one of ['Santa Clara']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_163", "question": [[{"role": "user", "content": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response."}]], "function": [{"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}]}, "model_result_raw": "[property_records.get(address=\"123 Main Street\", parcel_number=\"1234567890\", county=\"Santa Clara County\", include_owner=True)]", "model_result_decoded": [{"property_records.get": {"address": "123 Main Street", "parcel_number": "1234567890", "county": "Santa Clara County", "include_owner": true}}], "possible_answer": [{"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}]}
{"id": 165, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_164", "question": [[{"role": "user", "content": "Provide me the official crime rate of violent crime in San Francisco in 2020."}]], "function": [{"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime. Default is 'violent'"}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data. Default is year 2001."}}, "required": ["city", "state"]}}]}, "model_result_raw": "```python\nget_crime_rate(city=\"San Francisco\", state=\"California\", type=\"violent\", year=2020)\n```", "possible_answer": [{"get_crime_rate": {"city": ["San Francisco"], "state": ["California", "CA"], "type": ["violent", ""], "year": [2020]}}]}
{"id": 167, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "[lawyer.find_nearby(city=\"Chicago\", specialty=\"Divorce\", fee=\"400\")]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": "Divorce", "fee": "400"}}], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": 174, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_173", "question": [[{"role": "user", "content": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York."}]], "function": [{"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}]}, "model_result_raw": "[law_case_search, {\"topic\": \"land disputes\", \"year_range\": [2015, 2021], \"location\": \"New York\", \"judicial_system\": \"state\"}]", "possible_answer": [{"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}]}
{"id": 178, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'open'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "Find all Patent lawsuit cases of Facebook in 2018."}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "[get_lawsuit_cases(company_name=\"Facebook\", year=2018, status=\"open\")]", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "open"}}], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": 181, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_type': 'civil'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_180", "question": [[{"role": "user", "content": "Find the lawsuits filed against the company Google in California in the year 2020."}]], "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'."}}, "required": ["company_name", "location", "year"]}}]}, "model_result_raw": "[lawsuits_search(company_name=\"Google\", location=\"California\", year=2020, case_type=\"civil\")]", "model_result_decoded": [{"lawsuits_search": {"company_name": "Google", "location": "California", "year": 2020, "case_type": "civil"}}], "possible_answer": [{"lawsuits_search": {"company_name": ["Google"], "location": ["California", "CA"], "year": [2020], "case_type": ["", "all"]}}]}
{"id": 185, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'closed_status'. Expected type boolean, got NoneType. Parameter value: None."], "error_type": "type_error:simple", "prompt": {"id": "simple_184", "question": [[{"role": "user", "content": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed."}]], "function": [{"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}]}, "model_result_raw": "[lawsuit.check_case(case_id=1234, closed_status=None)]", "model_result_decoded": [{"lawsuit.check_case": {"case_id": 1234, "closed_status": null}}], "possible_answer": [{"lawsuit.check_case": {"case_id": [1234], "closed_status": [true]}}]}
{"id": 193, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'point2': [37.7749, -118.2437]. Expected one of [[34.0522, -118.2437]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_192", "question": [[{"role": "user", "content": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437)."}]], "function": [{"name": "calculate_slope_gradient", "description": "Calculate the slope gradient between two geographical coordinates.", "parameters": {"type": "dict", "properties": {"point1": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates for the first point [Latitude, Longitude]."}, "point2": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates for the second point [Latitude, Longitude]."}, "unit": {"type": "string", "enum": ["degree", "percent", "ratio"], "description": "The unit for the slope gradient. Default is 'degree'."}}, "required": ["point1", "point2"]}}]}, "model_result_raw": "[calculate_slope_gradient(point1=[40.7128, -74.006], point2=[37.7749, -118.2437], unit='degree')]", "model_result_decoded": [{"calculate_slope_gradient": {"point1": [40.7128, -74.006], "point2": [37.7749, -118.2437], "unit": "degree"}}], "possible_answer": [{"calculate_slope_gradient": {"point1": [[40.7128, -74.006]], "point2": [[34.0522, -118.2437]], "unit": ["degree", ""]}}]}
{"id": 194, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'plant_types': ['annual', 'succulent']. Expected one of [['Annual']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "Find the best local nurseries in Toronto with a good variety of annual plants."}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": "[local_nursery.find(location=\"Toronto\", plant_types=[\"annual\", \"succulent\"])]", "model_result_decoded": [{"local_nursery.find": {"location": "Toronto", "plant_types": ["annual", "succulent"]}}], "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": 197, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2022-08-16'. Expected one of ['08-16-2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "What is the air quality index in London 2022/08/16?"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": "[air_quality(location=\"London\", date=\"2022-08-16\")]", "model_result_decoded": [{"air_quality": {"location": "London", "date": "2022-08-16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": 202, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 2022. Expected one of ['', 2024]."], "error_type": "value_error:others", "prompt": {"id": "simple_201", "question": [[{"role": "user", "content": "Estimate the population of pandas in the wild in China."}]], "function": [{"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}]}, "model_result_raw": "[estimate_population(species=\"pandas\", country=\"China\", year=2022)]", "model_result_decoded": [{"estimate_population": {"species": "pandas", "country": "China", "year": 2022}}], "possible_answer": [{"estimate_population": {"species": ["panda", "pandas"], "country": ["China", "CN"], "year": ["", 2024]}}]}
{"id": 203, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": [[{"role": "user", "content": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?"}]], "function": [{"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}]}, "model_result_raw": "[calculate_emission_savings(energy_type=\"solar\", usage_duration=3, region=\"California\")]", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": [{"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}]}
{"id": 206, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_205", "question": [[{"role": "user", "content": "Find out the current traffic situation from Boston driving to New York."}]], "function": [{"name": "get_traffic_info", "description": "Retrieve current traffic conditions for a specified route.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the route."}, "end_location": {"type": "string", "description": "The destination of the route."}, "mode": {"type": "string", "enum": ["driving", "walking", "bicycling", "transit"], "description": "Preferred method of transportation, default to 'driving'."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[get_traffic_info(start_location=\"Boston\", end_location=\"New York\", mode=\"driving)]", "possible_answer": [{"get_traffic_info": {"start_location": ["Boston"], "end_location": ["New York", "NYC"], "mode": ["driving", ""]}}]}
{"id": 209, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'avoid': ['highways', 'tolls', 'bridges', 'tunnels']. Expected one of [['highways', 'tolls'], ['tolls', 'highways']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "[map_service.get_directions(start=\"New York\", end=\"Los Angeles\", avoid=[\"highways\", \"tolls\", \"bridges\", \"tunnels\"])]", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": ["highways", "tolls", "bridges", "tunnels"]}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": 215, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Chicago, IL'. Expected one of ['New York', 'New York, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_214", "question": [[{"role": "user", "content": "Search for upcoming month rock concerts in New York."}]], "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}]}, "model_result_raw": "[event_finder.find_upcoming(location=\"Chicago, IL\", genre=\"jazz\", days_ahead=30)]", "model_result_decoded": [{"event_finder.find_upcoming": {"location": "Chicago, IL", "genre": "jazz", "days_ahead": 30}}], "possible_answer": [{"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}]}
{"id": 216, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'extra_info': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "Give me a brief on movie 'Interstellar'"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "[movie_details.brief(title=\"Interstellar\", extra_info=True)]", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": true}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": 220, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'brain_region': 'human'. Expected one of ['All', 'all part of the brain', 'entire brain']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_219", "question": [[{"role": "user", "content": "What are the coordinates of the neuron in a rat's all part of the brain that produces GABA neurotransmitters?"}]], "function": [{"name": "get_neuron_coordinates", "description": "Retrieve the coordinates of the specified neuron in the rat's brain.", "parameters": {"type": "dict", "properties": {"neuron_type": {"type": "string", "description": "Type of neuron to find. For instance, GABA, Glutamate, etc."}, "brain_region": {"type": "string", "description": "The region of the brain to consider.", "default": "All"}}, "required": ["neuron_type", "brain_region"]}}]}, "model_result_raw": "[get_neuron_coordinates(neuron_type=\"GABA\", brain_region=\"human\")]", "model_result_decoded": [{"get_neuron_coordinates": {"neuron_type": "GABA", "brain_region": "human"}}], "possible_answer": [{"get_neuron_coordinates": {"neuron_type": ["GABA"], "brain_region": ["All", "all part of the brain", "entire brain"]}}]}
{"id": 222, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rate': 0.5. Expected one of ['', 1.2]."], "error_type": "value_error:others", "prompt": {"id": "simple_221", "question": [[{"role": "user", "content": "What will be the population growth in London over the next five years?"}]], "function": [{"name": "population_growth_estimate", "description": "Estimate the future population growth of a specific location over a specified time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to estimate the population growth for."}, "years": {"type": "integer", "description": "Number of years into the future for the estimate."}, "rate": {"type": "float", "description": "Expected annual growth rate in percentage. Default is 1.2."}}, "required": ["location", "years"]}}]}, "model_result_raw": "[population_growth_estimate(location=\"London\", years=5, rate=0.5)]", "model_result_decoded": [{"population_growth_estimate": {"location": "London", "years": 5, "rate": 0.5}}], "possible_answer": [{"population_growth_estimate": {"location": ["London"], "years": [5], "rate": ["", 1.2]}}]}
{"id": 225, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_224", "question": [[{"role": "user", "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}]}, "model_result_raw": "[social_media_analytics.most_followed(topic=\"psychology\", sub_topics=[\"mental health\", \"social connections\"]), social_media_analytics.most_followed(region=\"all\")]", "model_result_decoded": [{"social_media_analytics.most_followed": {"topic": "psychology", "sub_topics": ["mental health", "social connections"]}}, {"social_media_analytics.most_followed": {"region": "all"}}], "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}]}
{"id": 234, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_233", "question": [[{"role": "user", "content": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY."}]], "function": [{"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}]}, "model_result_raw": "[european_history.get_event_date(event_name=\"Treaty of Tordesillas\")]", "model_result_decoded": [{"european_history.get_event_date": {"event_name": "Treaty of Tordesillas"}}], "possible_answer": [{"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}]}
{"id": 246, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 1869. Expected one of ['', 0]."], "error_type": "value_error:others", "prompt": {"id": "simple_245", "question": [[{"role": "user", "content": "Who discovered radium?"}]], "function": [{"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}]}, "model_result_raw": "[discoverer.get(element_name=\"radium\", year=1869)]", "model_result_decoded": [{"discoverer.get": {"element_name": "radium", "year": 1869}}], "possible_answer": [{"discoverer.get": {"element_name": ["'radium'", "\"radium\"", "radium"], "year": ["", 0], "first": [true, ""]}}]}
{"id": 250, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "Tell me more about Christianity and its history till the 14th century"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "[religion.history_info(religion=\"Christianity\", till_century=14, include_people=True)]", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": 253, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'century': 1600. Expected one of [16]."], "error_type": "value_error:others", "prompt": {"id": "simple_252", "question": [[{"role": "user", "content": "Find ten major historical events related to Christianity in the 16th century sort by importance."}]], "function": [{"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}]}, "model_result_raw": "[get_religion_history(religion=\"Christianity\", century=1600, sort_by=\"importance\", count=10)]", "model_result_decoded": [{"get_religion_history": {"religion": "Christianity", "century": 1600, "sort_by": "importance", "count": 10}}], "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "century": [16], "sort_by": ["importance"], "count": [10]}}]}
{"id": 255, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_254", "question": [[{"role": "user", "content": "Retrieve the historic dates and facts related to Christianity between year 300 and 400."}]], "function": [{"name": "get_religion_history", "description": "Retrieves historic events and facts related to a specified religion for a given period.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The starting year of the period."}, "end_year": {"type": "integer", "description": "The end year of the period."}, "event_type": {"type": "string", "enum": ["all", "crusade", "schism", "reform"], "description": "Optional parameter specifying the type of event. Default is 'all'."}}, "required": ["religion", "start_year", "end_year"]}}]}, "model_result_raw": "**Final Response**: get_religion_history(religion=\"Christianity\", start_year=300, end_year=400, event_type=\"all\")", "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "start_year": [300], "end_year": [400], "event_type": ["all", ""]}}]}
{"id": 260, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coverage_rate': 500. Expected one of [400]."], "error_type": "value_error:others", "prompt": {"id": "simple_259", "question": [[{"role": "user", "content": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon."}]], "function": [{"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "dict", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}]}, "model_result_raw": "[calculate_paint_needed(coverage_rate=500, length=40, height=20)]", "model_result_decoded": [{"calculate_paint_needed": {"coverage_rate": 500, "length": 40, "height": 20}}], "possible_answer": [{"calculate_paint_needed": {"coverage_rate": [400], "length": [30], "height": [12]}}]}
{"id": 261, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'paint_requirement.calculate' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "[calculate(area={'width': 20, 'height': 12}, paint_coverage=350, exclusion={'type': 'window', 'area': 15})]", "model_result_decoded": [{"calculate": {"area": {"width": 20, "height": 12}, "paint_coverage": 350, "exclusion": {"type": "window", "area": 15}}}], "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": 268, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "[find_exhibition(location=\"New York\", art_form=\"modern sculpture\", month=\"upcoming\", user_ratings=\"high\")]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "modern sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": 278, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "```python\nmuseum_info(museum=\"The British Museum\", date=\"2023-06-20\", information=[\"opening_hours\", \"ticket_price\"])\n```", "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": 280, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'finish': 'Rosewood Finish'. Expected one of ['Rosewood']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_279", "question": [[{"role": "user", "content": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?"}]], "function": [{"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}]}, "model_result_raw": "[instrument_price.get(brand=\"Fender\", model=\"American Professional II Stratocaster\", finish=\"Rosewood Finish\")]", "model_result_decoded": [{"instrument_price.get": {"brand": "Fender", "model": "American Professional II Stratocaster", "finish": "Rosewood Finish"}}], "possible_answer": [{"instrument_price.get": {"brand": ["Fender"], "model": ["American Professional II Stratocaster"], "finish": ["Rosewood"]}}]}
{"id": 286, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Chicago'. Expected one of ['Chicago, Illinois', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_285", "question": [[{"role": "user", "content": "Find me a Rock concert in Chicago with ticket availability under $100."}]], "function": [{"name": "find_concert", "description": "Locate a concert in a specified location within a certain budget.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you are looking for a concert. In the format City, State."}, "price": {"type": "integer", "description": "Maximum ticket price."}, "genre": {"type": "string", "description": "Music genre of the concert. Default to 'Jazz'. ", "enum": ["Rock", "Pop", "Country", "Jazz", "Classical"]}}, "required": ["location", "price"]}}]}, "model_result_raw": "[find_concert(location=\"Chicago\", price=\"under 100\", genre=\"Rock\")]", "model_result_decoded": [{"find_concert": {"location": "Chicago", "price": "under 100", "genre": "Rock"}}], "possible_answer": [{"find_concert": {"location": ["Chicago, Illinois", "Chicago, IL"], "price": [100], "genre": ["Rock"]}}]}
{"id": 289, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'New York'. Expected one of ['New York City', 'New York City, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_288", "question": [[{"role": "user", "content": "Get me two tickets for next Eminem concert in New York City."}]], "function": [{"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}]}, "model_result_raw": "[concert_booking.book_ticket(artist=\"Eminem\", city=\"New York\", num_tickets=2)]", "model_result_decoded": [{"concert_booking.book_ticket": {"artist": "Eminem", "city": "New York", "num_tickets": 2}}], "possible_answer": [{"concert_booking.book_ticket": {"artist": ["Eminem"], "city": ["New York City", "New York City, NY", "NYC"], "num_tickets": [2]}}]}
{"id": 296, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 2)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_295", "question": [[{"role": "user", "content": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen."}]], "function": [{"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}]}, "model_result_raw": "```python\n[get_song_lyrics(song_title=\"Bohemian Rhapsody\", artist_name=\"Queen\", lang=\"English\")]\n```", "possible_answer": [{"get_song_lyrics": {"song_title": ["Bohemian Rhapsody"], "artist_name": ["Queen"], "lang": ["English", ""]}}]}
{"id": 297, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'music_generator.generate_scale_progression' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_296", "question": [[{"role": "user", "content": "Generate a major C scale progression with tempo 80 BPM and duration 4 beats."}]], "function": [{"name": "music_generator.generate_scale_progression", "description": "Generate a music scale progression in a specific key with a given tempo and duration.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key in which to generate the scale progression."}, "tempo": {"type": "integer", "description": "The tempo of the scale progression in BPM."}, "duration": {"type": "integer", "description": "The duration of each note in beats."}, "scale_type": {"type": "string", "default": "major", "description": "The type of scale to generate. Defaults to 'major'."}}, "required": ["key", "tempo", "duration"]}}]}, "model_result_raw": "[generate_scale_progression(key=\"C major\", tempo=80, duration=4)]", "model_result_decoded": [{"generate_scale_progression": {"key": "C major", "tempo": 80, "duration": 4}}], "possible_answer": [{"music_generator.generate_scale_progression": {"key": ["C"], "tempo": [80], "duration": [4], "scale_type": ["major", ""]}}]}
{"id": 298, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'return_all_possible_keys'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_297", "question": [[{"role": "user", "content": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])"}]], "function": [{"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}]}, "model_result_raw": "[music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'], return_all_possible_keys=True, assume_major=True)]", "model_result_decoded": [{"music.theory.chordProgression": {"progression": ["I", "V", "vi", "IV"], "return_all_possible_keys": true, "assume_major": true}}], "possible_answer": [{"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}]}
{"id": 301, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'music.calculate_note_duration' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_300", "question": [[{"role": "user", "content": "Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm."}]], "function": [{"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "integer", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "integer", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}]}, "model_result_raw": "[calculate_note_duration(first_note_frequency=440, second_note_frequency=880)]", "model_result_decoded": [{"calculate_note_duration": {"first_note_frequency": 440, "second_note_frequency": 880}}], "possible_answer": [{"music.calculate_note_duration": {"first_note_frequency": [440], "second_note_frequency": [880], "tempo": ["", 120]}}]}
{"id": 305, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'team'. Expected type string, got NoneType. Parameter value: None."], "error_type": "type_error:simple", "prompt": {"id": "simple_304", "question": [[{"role": "user", "content": "Get point and rebound stats for player 'LeBron James' from last basketball game"}]], "function": [{"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}]}, "model_result_raw": "[player_stats.getLastGame(player_name=\"LeBron James\", team=None, metrics=['Points', 'Rebounds'])]", "model_result_decoded": [{"player_stats.getLastGame": {"player_name": "LeBron James", "team": null, "metrics": ["Points", "Rebounds"]}}], "possible_answer": [{"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}]}
{"id": 308, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'venue': 'home'. Expected one of ['', True]."], "error_type": "value_error:others", "prompt": {"id": "simple_307", "question": [[{"role": "user", "content": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?"}]], "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}]}, "model_result_raw": "[game_result.get_winner(teams=['Lakers', 'Clippers'], date='2021-01-28', venue='home')]", "model_result_decoded": [{"game_result.get_winner": {"teams": ["Lakers", "Clippers"], "date": "2021-01-28", "venue": "home"}}], "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}]}
{"id": 326, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': 'LastSeason'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_325", "question": [[{"role": "user", "content": "Who won the last match between Chicago Bulls and Los Angeles Lakers?"}]], "function": [{"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}]}, "model_result_raw": "[sports.match_results(team1=\"Chicago Bulls\", team2=\"Los Angeles Lakers\", season=\"LastSeason\")]", "model_result_decoded": [{"sports.match_results": {"team1": "Chicago Bulls", "team2": "Los Angeles Lakers", "season": "LastSeason"}}], "possible_answer": [{"sports.match_results": {"team1": ["Chicago Bulls"], "team2": ["Los Angeles Lakers"], "season": [""]}}]}
{"id": 335, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'ace_value': 11. Expected one of [1]."], "error_type": "value_error:others", "prompt": {"id": "simple_334", "question": [[{"role": "user", "content": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1."}]], "function": [{"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}]}, "model_result_raw": "[blackjack.check_winner(player_cards=['A', '10'], dealer_cards=['10', '9'], ace_value=11)]", "model_result_decoded": [{"blackjack.check_winner": {"player_cards": ["A", "10"], "dealer_cards": ["10", "9"], "ace_value": 11}}], "possible_answer": [{"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}]}
{"id": 336, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Wrong number of dictionaries in the list."], "error_type": "value_error:list_dict_count", "prompt": {"id": "simple_335", "question": [[{"role": "user", "content": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck."}]], "function": [{"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}, "required": ["rank", "suit"]}}]}, "model_result_raw": "[find_card_in_deck(rank=\"Queen\", suit=\"Hearts\", deck=[{'rank': 'Ace', 'suit': 'Spades'}, {'rank': '2', 'suit': 'Hearts'}, {'rank': '3', 'suit': 'Diamonds'}, {'rank': '4', 'suit': 'Hearts'}])]", "model_result_decoded": [{"find_card_in_deck": {"rank": "Queen", "suit": "Hearts", "deck": [{"rank": "Ace", "suit": "Spades"}, {"rank": "2", "suit": "Hearts"}, {"rank": "3", "suit": "Diamonds"}, {"rank": "4", "suit": "Hearts"}]}}], "possible_answer": [{"find_card_in_deck": {"rank": ["Queen"], "suit": ["Hearts"], "deck": [""]}}]}
{"id": 339, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'desired_cards': 1. Expected one of [13]."], "error_type": "value_error:others", "prompt": {"id": "simple_338", "question": [[{"role": "user", "content": "What is the probability of drawing a heart card from a deck of 52 cards?"}]], "function": [{"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "dict", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}]}, "model_result_raw": "[card_game_probability.calculate(total_cards=52, desired_cards=1, cards_drawn=1)]", "model_result_decoded": [{"card_game_probability.calculate": {"total_cards": 52, "desired_cards": 1, "cards_drawn": 1}}], "possible_answer": [{"card_game_probability.calculate": {"total_cards": [52], "desired_cards": [13], "cards_drawn": ["", 1]}}]}
{"id": 341, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_340", "question": [[{"role": "user", "content": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660."}]], "function": [{"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "dict", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}]}, "model_result_raw": "**Function Calling Response**: card_games.poker_determine_winner(player1=\"John\", hand1=[\"8\u2665\", \"10\u2665\", \"J\u2665\", \"Q\u2665\", \"K\u2665\"], player2=\"Mike\", hand2=[\"9\u2660\", \"J\u2660\", \"10\u2660\", \"Q\u2660\", \"K\u2660\"])", "possible_answer": [{"card_games.poker_determine_winner": {"player1": ["John"], "hand1": [["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"]], "player2": ["Mike"], "hand2": [["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]]}}]}
{"id": 342, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'suit': 'heart'. Expected one of ['hearts']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_341", "question": [[{"role": "user", "content": "What are the odds of drawing a heart card from a deck without joker?"}]], "function": [{"name": "deck_of_cards.odds", "description": "Compute the probability of drawing a specific suit from a given deck of cards.", "parameters": {"type": "dict", "properties": {"suit": {"type": "string", "description": "The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'."}, "deck_type": {"type": "string", "description": "Type of deck, normal deck includes joker, and without_joker deck excludes joker.", "default": "normal"}}, "required": ["suit", "deck_type"]}}]}, "model_result_raw": "[deck_of_cards.odds(suit=\"heart\", deck_type=\"normal\")]", "model_result_decoded": [{"deck_of_cards.odds": {"suit": "heart", "deck_type": "normal"}}], "possible_answer": [{"deck_of_cards.odds": {"suit": ["hearts"], "deck_type": ["without_joker", "normal"]}}]}
{"id": 343, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'multiplayer': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"id": "simple_342", "question": [[{"role": "user", "content": "Find all multi-player games released in 2019 with an ESRB rating of 'Everyone'"}]], "function": [{"name": "game_list.get_games", "description": "Get a list of video games based on release year, multiplayer functionality and ESRB rating", "parameters": {"type": "dict", "properties": {"release_year": {"type": "integer", "description": "The year the game was released."}, "multiplayer": {"type": "boolean", "description": "Whether the game has multiplayer functionality."}, "ESRB_rating": {"type": "string", "description": "The ESRB rating of the game."}}, "required": ["release_year", "multiplayer", "ESRB_rating"]}}]}, "model_result_raw": "[game_list.get_games(release_year=2019, multiplayer=False, ESRB_rating='Everyone')]", "model_result_decoded": [{"game_list.get_games": {"release_year": 2019, "multiplayer": false, "ESRB_rating": "Everyone"}}], "possible_answer": [{"game_list.get_games": {"release_year": [2019], "multiplayer": [true], "ESRB_rating": ["Everyone"]}}]}
{"id": 345, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_344", "question": [[{"role": "user", "content": "What's the power rating for the Weapon 'Guardian Sword+' in the game 'Legend of Zelda: Breath of the Wild'?"}]], "function": [{"name": "get_game_item_stats", "description": "Retrieve the statistics of a specific item in a specific video game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game to retrieve information from."}, "item": {"type": "string", "description": "The name of the item in the game."}, "stat": {"type": "string", "description": "Specific statistic required."}}, "required": ["game", "item", "stat"]}}]}, "model_result_raw": "**Function Calling Response**: [get_game_item_stats(game=\"The Legend of Zelda: Breath of the Wild\", item=\"Guardian Sword+\", stat=\"power\")]\n**Validation Feedback Response**: Invalid: Function call at index 1 (get_game_item_stats) is not correct because The parameters are not valid Python literals. Error: unterminated string literal (detected at line 1) (<unknown>, line 1)", "possible_answer": [{"get_game_item_stats": {"game": ["Legend of Zelda: Breath of the Wild"], "item": ["Guardian Sword+"], "stat": ["Power", "power", "power rating"]}}]}
{"id": 357, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'prep_time': 29. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"id": "simple_356", "question": [[{"role": "user", "content": "Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare."}]], "function": [{"name": "recipe_finder.find", "description": "Find a recipe based on dietary preferences, number of servings, and preparation time.", "parameters": {"type": "dict", "properties": {"servings": {"type": "integer", "description": "The number of people that the recipe should serve."}, "diet": {"type": "string", "description": "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."}, "prep_time": {"type": "integer", "description": "The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes."}}, "required": ["servings", "diet"]}}]}, "model_result_raw": "[recipe_finder.find(servings=2, diet=\"vegan\", prep_time=29)]", "model_result_decoded": [{"recipe_finder.find": {"servings": 2, "diet": "vegan", "prep_time": 29}}], "possible_answer": [{"recipe_finder.find": {"servings": [2], "diet": ["vegan"], "prep_time": [30]}}]}
{"id": 359, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'dish'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_358", "question": [[{"role": "user", "content": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare."}]], "function": [{"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}]}, "model_result_raw": "[recipe_search(diet=['Gluten Free'], time_limit=20)]", "model_result_decoded": [{"recipe_search": {"diet": ["Gluten Free"], "time_limit": 20}}], "possible_answer": [{"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}]}
{"id": 361, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'maxCalories': 499. Expected one of [500]."], "error_type": "value_error:others", "prompt": {"id": "simple_360", "question": [[{"role": "user", "content": "Find a recipe for pasta carbonara which contains only less than 500 calories."}]], "function": [{"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}]}, "model_result_raw": "[find_recipe(recipeName=\"pasta carbonara\", maxCalories=499)]", "model_result_decoded": [{"find_recipe": {"recipeName": "pasta carbonara", "maxCalories": 499}}], "possible_answer": [{"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}]}
{"id": 363, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'review_rate': 4.5. Expected one of [4.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_362", "question": [[{"role": "user", "content": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?"}]], "function": [{"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}]}, "model_result_raw": "[get_best_sushi_places(city=\"Tokyo\", top=5, review_rate=4.5)]", "model_result_decoded": [{"get_best_sushi_places": {"city": "Tokyo", "top": 5, "review_rate": 4.5}}], "possible_answer": [{"get_best_sushi_places": {"city": ["Tokyo"], "top": [5], "review_rate": [4.0]}}]}
{"id": 364, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'amenities': ['Patio', 'Wi-Fi']. Expected one of [['Patio']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_363", "question": [[{"role": "user", "content": "Find the closest sushi restaurant with a patio in Boston."}]], "function": [{"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "[restaurant_search.find_closest(location=\"Boston\", cuisine=\"Sushi\", amenities=[\"Patio\", \"Wi-Fi\"])]", "model_result_decoded": [{"restaurant_search.find_closest": {"location": "Boston", "cuisine": "Sushi", "amenities": ["Patio", "Wi-Fi"]}}], "possible_answer": [{"find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi", "sushi"], "amenities": [["Patio"]]}}]}
{"id": 368, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_367", "question": [[{"role": "user", "content": "Find me a vegan recipe for brownies which prep time is under 30 minutes."}]], "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "[find_recipe(dietary_restrictions=\"vegan\", recipe_type=\"brownies\", time=20)]", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 20}}], "possible_answer": [{"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}]}
{"id": 371, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'San Francisco'. Expected one of ['Palo Alto', 'Palo Alto, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "[safeway.order(location=\"Palo Alto, CA\", items=[\"olive oil\", \"olive oil\"], quantity=[3, 3], location=\"Trader Joe's\", items=[\"olive oil\", \"olive oil\"], quantity=[2, 2], location=\"Whole Foods\", items=[\"olive oil\", \"flour\"], quantity=[2, 6], location=\"San Francisco\", items=[\"olive oil\", \"flour\"], quantity=[2, 6])]", "model_result_decoded": [{"safeway.order": {"location": "San Francisco", "items": ["olive oil", "flour"], "quantity": [2, 6]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": 373, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product': 'banana'. Expected one of ['bananas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_372", "question": [[{"role": "user", "content": "Find the top five organic bananas brands on the basis of rating from Whole Foods store."}]], "function": [{"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}]}, "model_result_raw": "[whole_foods.find_top_brands(product=\"banana\", number=5, organic=True)]", "model_result_decoded": [{"whole_foods.find_top_brands": {"product": "banana", "number": 5, "organic": true}}], "possible_answer": [{"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}]}
{"id": 374, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12 pack of bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "    [walmart.purchase(loc=\"San Jose\", product_list=[\"apples\", \"rice\", \"12 pack of bottled water\"], pack_size=[1, 1, 12])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12 pack of bottled water"], "pack_size": [1, 1, 12]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": 376, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'egg']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "[walmart.check_price(items=['pumpkin', 'egg'], quantities=[3, 2, 12])]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkin", "egg"], "quantities": [3, 2, 12]}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": 381, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "[hotel_booking(location=\"New York\", room_type=\"single\", duration=3, start_date=\"2023-03-10\", preferences=[\"pet_friendly\"], preferences_value=\"single\")]", "model_result_decoded": [{"hotel_booking": {"location": "New York", "room_type": "single", "duration": 3, "start_date": "2023-03-10", "preferences": ["pet_friendly"], "preferences_value": "single"}}], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": 383, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'Holiday Inn Express'. Expected one of ['Hilton Hotel', 'Hilton']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": [[{"role": "user", "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "[book_hotel(hotel_name=\"Holiday Inn Express\", location=\"Chicago\", room_type=\"double\", start_date=\"2022-12-03\", nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Holiday Inn Express", "location": "Chicago", "room_type": "double", "start_date": "2022-12-03", "nights": 2}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}]}
{"id": 385, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'adults'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_384", "question": [[{"role": "user", "content": "Book a hotel room for two adults and one child in Paris, France from July 10, 2022 to July 20, 2022."}]], "function": [{"name": "hotel_booking.book", "description": "Book a hotel room given the city, date, and the number of adults and children.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city where the hotel is located."}, "from_date": {"type": "string", "description": "The start date of the booking. The format is MM-DD-YYYY."}, "to_date": {"type": "string", "description": "The end date of the booking. The format is MM-DD-YYYY."}, "adults": {"type": "integer", "description": "The number of adults for the booking."}, "children": {"type": "integer", "description": "The number of children for the booking."}, "room_type": {"type": "string", "description": "The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.", "default": "Standard"}}, "required": ["city", "from_date", "to_date", "adults", "children"]}}]}, "model_result_raw": "[hotel_booking.book(city=\"Paris\", from_date=\"07-10-2022\", to_date=\"07-20-2022\", adult=2, children=1, room_type=\"Standard\")]", "model_result_decoded": [{"hotel_booking.book": {"city": "Paris", "from_date": "07-10-2022", "to_date": "07-20-2022", "adult": 2, "children": 1, "room_type": "Standard"}}], "possible_answer": [{"hotel_booking.book": {"city": ["Paris", "Paris, France"], "from_date": ["07-10-2022", "2022-07-10", "10/07/2022", "Jul.10,2022"], "to_date": ["07-20-2022", "2022-07-20", "20/07/2022", "Jul.20,2022"], "adults": [2], "children": [1], "room_type": ["Standard", ""]}}]}
{"id": 387, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': 'mountain_view'. Expected one of ['luxury', 'Luxury']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_386", "question": [[{"role": "user", "content": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}]}, "model_result_raw": "[book_hotel(hotel_name=\"Hotel Paradise\", location=\"Las Vegas\", room_type=\"mountain_view\", start_date=\"05-12-2022\", stay_duration=3, view=\"city\")]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hotel Paradise", "location": "Las Vegas", "room_type": "mountain_view", "start_date": "05-12-2022", "stay_duration": 3, "view": "city"}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}]}
{"id": 388, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_date': '2022-06-03'. Expected one of ['2022-06-04', '06/04/2022', 'Jun.4,2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "[hotel_booking(hotel_name=\"Plaza Hotel\", location=\"New York, NY\", start_date=\"2022-06-01\", end_date=\"2022-06-03\", rooms=1)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-03", "rooms": 1}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}
{"id": 389, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'US Dollar'. Expected one of ['USD']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_388", "question": [[{"role": "user", "content": "How many Canadian dollars can I get for 500 US dollars?"}]], "function": [{"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "integer", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "[currency_exchange.convert(base_currency=\"US Dollar\", target_currency=\"Canadian Dollar\", amount=500)]", "model_result_decoded": [{"currency_exchange.convert": {"base_currency": "US Dollar", "target_currency": "Canadian Dollar", "amount": 500}}], "possible_answer": [{"currency_exchange.convert": {"base_currency": ["USD"], "target_currency": ["CAD"], "amount": [500]}}]}
{"id": 390, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'US Dollar'. Expected one of ['USD']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_389", "question": [[{"role": "user", "content": "Calculate the current cost in British Pounds if I need to convert 200 US dollars."}]], "function": [{"name": "currency_converter", "description": "Calculates the current cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "[currency_converter(base_currency=\"US Dollar\", target_currency=\"British Pound\", amount=200)]", "model_result_decoded": [{"currency_converter": {"base_currency": "US Dollar", "target_currency": "British Pound", "amount": 200}}], "possible_answer": [{"currency_converter": {"base_currency": ["USD"], "target_currency": ["GBP"], "amount": [200.0]}}]}
{"id": 391, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'currency_conversion.convert' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_390", "question": [[{"role": "user", "content": "Convert 150 Euros to Canadian dollars."}]], "function": [{"name": "currency_conversion.convert", "description": "Convert a value from one currency to another.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}]}, "model_result_raw": "[convert(amount=150, from_currency=\"EUR\", to_currency=\"CAD\")]", "model_result_decoded": [{"convert": {"amount": 150, "from_currency": "EUR", "to_currency": "CAD"}}], "possible_answer": [{"currency_conversion.convert": {"amount": [150], "from_currency": ["EUR", "Euros"], "to_currency": ["CAD", "Canadian dollars"]}}]}
{"id": 394, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'Japanese Yen'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_393", "question": [[{"role": "user", "content": "How much will 20000 Japanese Yen be in United States Dollar?"}]], "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "[convert_currency(base_currency=\"Japanese Yen\", target_currency=\"United States Dollar\", amount=20000)]", "model_result_decoded": [{"convert_currency": {"base_currency": "Japanese Yen", "target_currency": "United States Dollar", "amount": 20000}}], "possible_answer": [{"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}]}
{"id": 398, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'origin': 'New York, New York'. Expected one of ['New York', 'New York City', 'New York City, NY', 'New York, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_397", "question": [[{"role": "user", "content": "Find the distance between New York and Boston, accounting for terrain."}]], "function": [{"name": "distance_calculator.calculate", "description": "Calculate the distance between two locations, considering terrain.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting location of the distance measurement."}, "destination": {"type": "string", "description": "Destination location of the distance measurement."}, "consider_terrain": {"type": "boolean", "description": "Whether to account for terrain in distance calculation, defaults to false."}}, "required": ["origin", "destination"]}}]}, "model_result_raw": "[distance_calculator.calculate(origin=\"New York, New York\", destination=\"Boston, Massachusetts\", consider_terrain=True)]", "model_result_decoded": [{"distance_calculator.calculate": {"origin": "New York, New York", "destination": "Boston, Massachusetts", "consider_terrain": true}}], "possible_answer": [{"distance_calculator.calculate": {"origin": ["New York", "New York City", "New York City, NY", "New York, NY", "NYC"], "destination": ["Boston"], "consider_terrain": [true]}}]}
{"id": 400, "model_name": "Qwen_Qwen2.5-1.5B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rating': 5. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"id": "simple_399", "question": [[{"role": "user", "content": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards."}]], "function": [{"name": "restaurant_search", "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York City, NY"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."}, "rating": {"type": "integer", "description": "Minimum average customer rating out of 5"}, "accepts_credit_cards": {"type": "boolean", "description": "If the restaurant should accept credit cards."}}, "required": ["location", "cuisine", "rating", "accepts_credit_cards"]}}]}, "model_result_raw": "[restaurant_search(location=\"New York City, NY\", cuisine=\"Italian\", rating=5, accepts_credit_cards=True)]", "model_result_decoded": [{"restaurant_search": {"location": "New York City, NY", "cuisine": "Italian", "rating": 5, "accepts_credit_cards": true}}], "possible_answer": [{"restaurant_search": {"location": ["New York City", "New York City, NY", "NYC"], "cuisine": ["Italian"], "rating": [4], "accepts_credit_cards": [true]}}]}